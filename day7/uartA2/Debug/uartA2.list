
uartA2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08001364  08001364  00002364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014f4  080014f4  00003050  2**0
                  CONTENTS
  4 .ARM          00000008  080014f4  080014f4  000024f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080014fc  080014fc  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014fc  080014fc  000024fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001500  08001500  00002500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001504  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003050  2**0
                  CONTENTS
 10 .bss          00000168  20000050  20000050  00003050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b8  200001b8  00003050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011a2  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000059e  00000000  00000000  00004222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  000047c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000be  00000000  00000000  000048e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001854f  00000000  00000000  0000499e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000019b4  00000000  00000000  0001ceed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bdc5  00000000  00000000  0001e8a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aa666  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000099c  00000000  00000000  000aa6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000ab048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005e  00000000  00000000  000ab067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000050 	.word	0x20000050
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800134c 	.word	0x0800134c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000054 	.word	0x20000054
 80001cc:	0800134c 	.word	0x0800134c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LedInit>:
 */

#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 8000288:	4b29      	ldr	r3, [pc, #164]	@ (8000330 <LedInit+0xb0>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028c:	4a28      	ldr	r2, [pc, #160]	@ (8000330 <LedInit+0xb0>)
 800028e:	f043 0308 	orr.w	r3, r3, #8
 8000292:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as output (in MODER)
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 8000294:	4b27      	ldr	r3, [pc, #156]	@ (8000334 <LedInit+0xb4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	0052      	lsls	r2, r2, #1
 800029c:	3201      	adds	r2, #1
 800029e:	2101      	movs	r1, #1
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	43d2      	mvns	r2, r2
 80002a6:	4611      	mov	r1, r2
 80002a8:	4a22      	ldr	r2, [pc, #136]	@ (8000334 <LedInit+0xb4>)
 80002aa:	400b      	ands	r3, r1
 80002ac:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 80002ae:	4b21      	ldr	r3, [pc, #132]	@ (8000334 <LedInit+0xb4>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	0052      	lsls	r2, r2, #1
 80002b6:	2101      	movs	r1, #1
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a1d      	ldr	r2, [pc, #116]	@ (8000334 <LedInit+0xb4>)
 80002c0:	430b      	orrs	r3, r1
 80002c2:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000334 <LedInit+0xb4>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	0052      	lsls	r2, r2, #1
 80002cc:	3201      	adds	r2, #1
 80002ce:	2101      	movs	r1, #1
 80002d0:	4091      	lsls	r1, r2
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	0052      	lsls	r2, r2, #1
 80002d6:	2001      	movs	r0, #1
 80002d8:	fa00 f202 	lsl.w	r2, r0, r2
 80002dc:	430a      	orrs	r2, r1
 80002de:	43d2      	mvns	r2, r2
 80002e0:	4611      	mov	r1, r2
 80002e2:	4a14      	ldr	r2, [pc, #80]	@ (8000334 <LedInit+0xb4>)
 80002e4:	400b      	ands	r3, r1
 80002e6:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002e8:	4b12      	ldr	r3, [pc, #72]	@ (8000334 <LedInit+0xb4>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	0052      	lsls	r2, r2, #1
 80002f0:	3201      	adds	r2, #1
 80002f2:	2101      	movs	r1, #1
 80002f4:	4091      	lsls	r1, r2
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	0052      	lsls	r2, r2, #1
 80002fa:	2001      	movs	r0, #1
 80002fc:	fa00 f202 	lsl.w	r2, r0, r2
 8000300:	430a      	orrs	r2, r1
 8000302:	43d2      	mvns	r2, r2
 8000304:	4611      	mov	r1, r2
 8000306:	4a0b      	ldr	r2, [pc, #44]	@ (8000334 <LedInit+0xb4>)
 8000308:	400b      	ands	r3, r1
 800030a:	60d3      	str	r3, [r2, #12]
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
 800030c:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <LedInit+0xb4>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	2101      	movs	r1, #1
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	43d2      	mvns	r2, r2
 800031a:	4611      	mov	r1, r2
 800031c:	4a05      	ldr	r2, [pc, #20]	@ (8000334 <LedInit+0xb4>)
 800031e:	400b      	ands	r3, r1
 8000320:	6053      	str	r3, [r2, #4]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	40020c00 	.word	0x40020c00

08000338 <LedOn>:

void LedOn(uint32_t pin) {
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	// set led pin (in ODR)
	LED_GPIO->ODR |= BV(pin);
 8000340:	4b07      	ldr	r3, [pc, #28]	@ (8000360 <LedOn+0x28>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	2101      	movs	r1, #1
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	fa01 f202 	lsl.w	r2, r1, r2
 800034c:	4611      	mov	r1, r2
 800034e:	4a04      	ldr	r2, [pc, #16]	@ (8000360 <LedOn+0x28>)
 8000350:	430b      	orrs	r3, r1
 8000352:	6153      	str	r3, [r2, #20]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40020c00 	.word	0x40020c00

08000364 <LedOff>:

void LedOff(uint32_t pin) {
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	// clear led pin (in ODR)
	LED_GPIO->ODR &= ~BV(pin);
 800036c:	4b08      	ldr	r3, [pc, #32]	@ (8000390 <LedOff+0x2c>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	2101      	movs	r1, #1
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	fa01 f202 	lsl.w	r2, r1, r2
 8000378:	43d2      	mvns	r2, r2
 800037a:	4611      	mov	r1, r2
 800037c:	4a04      	ldr	r2, [pc, #16]	@ (8000390 <LedOff+0x2c>)
 800037e:	400b      	ands	r3, r1
 8000380:	6153      	str	r3, [r2, #20]
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40020c00 	.word	0x40020c00

08000394 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08a      	sub	sp, #40	@ 0x28
 8000398:	af00      	add	r7, sp, #0
	SystemInit();
 800039a:	f000 f87b 	bl	8000494 <SystemInit>
	UartInit(BAUD_9600);
 800039e:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80003a2:	f000 f8ad 	bl	8000500 <UartInit>
	LedInit(LED_GREEN);
 80003a6:	200c      	movs	r0, #12
 80003a8:	f7ff ff6a 	bl	8000280 <LedInit>
	LedInit(LED_ORANGE);
 80003ac:	200d      	movs	r0, #13
 80003ae:	f7ff ff67 	bl	8000280 <LedInit>
	LedInit(LED_RED);
 80003b2:	200e      	movs	r0, #14
 80003b4:	f7ff ff64 	bl	8000280 <LedInit>
	LedInit(LED_BLUE);
 80003b8:	200f      	movs	r0, #15
 80003ba:	f7ff ff61 	bl	8000280 <LedInit>
	char str[32];
	int choice;
	UartPuts("Enter your choice\r\n0. Exit\r\n1. Red Led On\r\n2. Red Led Off\r\n3. Blue Led On\r\n4. Blue Led Off\r\n");
 80003be:	4818      	ldr	r0, [pc, #96]	@ (8000420 <main+0x8c>)
 80003c0:	f000 f93a 	bl	8000638 <UartPuts>

	//UartGets(str);
	//sscanf(str, "%d", &choice);

	while(1){
		UartGets(str);
 80003c4:	f107 0308 	add.w	r3, r7, #8
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f951 	bl	8000670 <UartGets>
		sscanf(str, "%d", &choice);
 80003ce:	1d3a      	adds	r2, r7, #4
 80003d0:	f107 0308 	add.w	r3, r7, #8
 80003d4:	4913      	ldr	r1, [pc, #76]	@ (8000424 <main+0x90>)
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f99a 	bl	8000710 <siscanf>

		switch(choice){
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3b01      	subs	r3, #1
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d8ef      	bhi.n	80003c4 <main+0x30>
 80003e4:	a201      	add	r2, pc, #4	@ (adr r2, 80003ec <main+0x58>)
 80003e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ea:	bf00      	nop
 80003ec:	080003fd 	.word	0x080003fd
 80003f0:	08000405 	.word	0x08000405
 80003f4:	0800040d 	.word	0x0800040d
 80003f8:	08000415 	.word	0x08000415
	         case 1:
	    	   LedOn(LED_RED);
 80003fc:	200e      	movs	r0, #14
 80003fe:	f7ff ff9b 	bl	8000338 <LedOn>
	    	   break;
 8000402:	e00c      	b.n	800041e <main+0x8a>

	         case 2:
			  LedOff(LED_RED);
 8000404:	200e      	movs	r0, #14
 8000406:	f7ff ffad 	bl	8000364 <LedOff>
			  break;
 800040a:	e008      	b.n	800041e <main+0x8a>

		    case 3:
	 		 LedOn(LED_BLUE);
 800040c:	200f      	movs	r0, #15
 800040e:	f7ff ff93 	bl	8000338 <LedOn>
			 break;
 8000412:	e004      	b.n	800041e <main+0x8a>

		    case 4:
			 LedOff(LED_BLUE);
 8000414:	200f      	movs	r0, #15
 8000416:	f7ff ffa5 	bl	8000364 <LedOff>
		     break;
 800041a:	bf00      	nop
 800041c:	e7d2      	b.n	80003c4 <main+0x30>
		UartGets(str);
 800041e:	e7d1      	b.n	80003c4 <main+0x30>
 8000420:	08001364 	.word	0x08001364
 8000424:	080013c4 	.word	0x080013c4

08000428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000430:	4a14      	ldr	r2, [pc, #80]	@ (8000484 <_sbrk+0x5c>)
 8000432:	4b15      	ldr	r3, [pc, #84]	@ (8000488 <_sbrk+0x60>)
 8000434:	1ad3      	subs	r3, r2, r3
 8000436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800043c:	4b13      	ldr	r3, [pc, #76]	@ (800048c <_sbrk+0x64>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d102      	bne.n	800044a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000444:	4b11      	ldr	r3, [pc, #68]	@ (800048c <_sbrk+0x64>)
 8000446:	4a12      	ldr	r2, [pc, #72]	@ (8000490 <_sbrk+0x68>)
 8000448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800044a:	4b10      	ldr	r3, [pc, #64]	@ (800048c <_sbrk+0x64>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	693a      	ldr	r2, [r7, #16]
 8000454:	429a      	cmp	r2, r3
 8000456:	d207      	bcs.n	8000468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000458:	f000 f986 	bl	8000768 <__errno>
 800045c:	4603      	mov	r3, r0
 800045e:	220c      	movs	r2, #12
 8000460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000462:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000466:	e009      	b.n	800047c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000468:	4b08      	ldr	r3, [pc, #32]	@ (800048c <_sbrk+0x64>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800046e:	4b07      	ldr	r3, [pc, #28]	@ (800048c <_sbrk+0x64>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4413      	add	r3, r2
 8000476:	4a05      	ldr	r2, [pc, #20]	@ (800048c <_sbrk+0x64>)
 8000478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800047a:	68fb      	ldr	r3, [r7, #12]
}
 800047c:	4618      	mov	r0, r3
 800047e:	3718      	adds	r7, #24
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20020000 	.word	0x20020000
 8000488:	00000400 	.word	0x00000400
 800048c:	2000006c 	.word	0x2000006c
 8000490:	200001b8 	.word	0x200001b8

08000494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  DWT_Init();
 8000498:	f000 f802 	bl	80004a0 <DWT_Init>
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}

080004a0 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004a4:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <DWT_Init+0x58>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	4a13      	ldr	r2, [pc, #76]	@ (80004f8 <DWT_Init+0x58>)
 80004aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004ae:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004b0:	4b11      	ldr	r3, [pc, #68]	@ (80004f8 <DWT_Init+0x58>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a10      	ldr	r2, [pc, #64]	@ (80004f8 <DWT_Init+0x58>)
 80004b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004ba:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	@ (80004fc <DWT_Init+0x5c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0e      	ldr	r2, [pc, #56]	@ (80004fc <DWT_Init+0x5c>)
 80004c2:	f023 0301 	bic.w	r3, r3, #1
 80004c6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <DWT_Init+0x5c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0b      	ldr	r2, [pc, #44]	@ (80004fc <DWT_Init+0x5c>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80004d4:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <DWT_Init+0x5c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80004da:	bf00      	nop
    __ASM volatile ("NOP");
 80004dc:	bf00      	nop
    __ASM volatile ("NOP");
 80004de:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80004e0:	4b06      	ldr	r3, [pc, #24]	@ (80004fc <DWT_Init+0x5c>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	bf0c      	ite	eq
 80004e8:	2301      	moveq	r3, #1
 80004ea:	2300      	movne	r3, #0
 80004ec:	b2db      	uxtb	r3, r3
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	e000edf0 	.word	0xe000edf0
 80004fc:	e0001000 	.word	0xe0001000

08000500 <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 8000508:	4b31      	ldr	r3, [pc, #196]	@ (80005d0 <UartInit+0xd0>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050c:	4a30      	ldr	r2, [pc, #192]	@ (80005d0 <UartInit+0xd0>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000514:	4b2f      	ldr	r3, [pc, #188]	@ (80005d4 <UartInit+0xd4>)
 8000516:	6a1b      	ldr	r3, [r3, #32]
 8000518:	4a2e      	ldr	r2, [pc, #184]	@ (80005d4 <UartInit+0xd4>)
 800051a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800051e:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 8000520:	4b2c      	ldr	r3, [pc, #176]	@ (80005d4 <UartInit+0xd4>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a2b      	ldr	r2, [pc, #172]	@ (80005d4 <UartInit+0xd4>)
 8000526:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800052a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 800052c:	4b29      	ldr	r3, [pc, #164]	@ (80005d4 <UartInit+0xd4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a28      	ldr	r2, [pc, #160]	@ (80005d4 <UartInit+0xd4>)
 8000532:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000536:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000538:	4b26      	ldr	r3, [pc, #152]	@ (80005d4 <UartInit+0xd4>)
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	4a25      	ldr	r2, [pc, #148]	@ (80005d4 <UartInit+0xd4>)
 800053e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000542:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000544:	4b23      	ldr	r3, [pc, #140]	@ (80005d4 <UartInit+0xd4>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	4a22      	ldr	r2, [pc, #136]	@ (80005d4 <UartInit+0xd4>)
 800054a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800054e:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 8000550:	4b20      	ldr	r3, [pc, #128]	@ (80005d4 <UartInit+0xd4>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	4a1f      	ldr	r2, [pc, #124]	@ (80005d4 <UartInit+0xd4>)
 8000556:	f023 030c 	bic.w	r3, r3, #12
 800055a:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 800055c:	4b1c      	ldr	r3, [pc, #112]	@ (80005d0 <UartInit+0xd0>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	4a1b      	ldr	r2, [pc, #108]	@ (80005d0 <UartInit+0xd0>)
 8000562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000566:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000568:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <UartInit+0xd8>)
 800056a:	220c      	movs	r2, #12
 800056c:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 800056e:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <UartInit+0xd8>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 8000574:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <UartInit+0xd8>)
 8000576:	2200      	movs	r2, #0
 8000578:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000580:	d016      	beq.n	80005b0 <UartInit+0xb0>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000588:	d816      	bhi.n	80005b8 <UartInit+0xb8>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000590:	d004      	beq.n	800059c <UartInit+0x9c>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000598:	d005      	beq.n	80005a6 <UartInit+0xa6>
 800059a:	e00d      	b.n	80005b8 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 800059c:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <UartInit+0xd8>)
 800059e:	f240 6283 	movw	r2, #1667	@ 0x683
 80005a2:	609a      	str	r2, [r3, #8]
			break;
 80005a4:	e008      	b.n	80005b8 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 80005a6:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <UartInit+0xd8>)
 80005a8:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80005ac:	609a      	str	r2, [r3, #8]
			break;
 80005ae:	e003      	b.n	80005b8 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 80005b0:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <UartInit+0xd8>)
 80005b2:	228b      	movs	r2, #139	@ 0x8b
 80005b4:	609a      	str	r2, [r3, #8]
			break;
 80005b6:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 80005b8:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <UartInit+0xd8>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	4a06      	ldr	r2, [pc, #24]	@ (80005d8 <UartInit+0xd8>)
 80005be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005c2:	60d3      	str	r3, [r2, #12]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40020000 	.word	0x40020000
 80005d8:	40004400 	.word	0x40004400

080005dc <UartPutch>:

void UartPutch(uint8_t ch) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 80005e6:	bf00      	nop
 80005e8:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <UartPutch+0x2c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0f9      	beq.n	80005e8 <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = ch;
 80005f4:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <UartPutch+0x2c>)
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	6053      	str	r3, [r2, #4]
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40004400 	.word	0x40004400

0800060c <UartGetch>:

uint8_t UartGetch(void) {
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
	// wait until RDR is not empty (i.e. new byte received)
	while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 8000612:	bf00      	nop
 8000614:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <UartGetch+0x28>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f003 0320 	and.w	r3, r3, #32
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0f9      	beq.n	8000614 <UartGetch+0x8>
		;
	// read received byte from RDR
	char ch = USART2->DR;
 8000620:	4b04      	ldr	r3, [pc, #16]	@ (8000634 <UartGetch+0x28>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	71fb      	strb	r3, [r7, #7]
	return ch;
 8000626:	79fb      	ldrb	r3, [r7, #7]
}
 8000628:	4618      	mov	r0, r3
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	40004400 	.word	0x40004400

08000638 <UartPuts>:

void UartPuts(char str[]) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	e009      	b.n	800065a <UartPuts+0x22>
		UartPutch(str[i]);
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ffc4 	bl	80005dc <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1ef      	bne.n	8000646 <UartPuts+0xe>
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <UartGets>:

void UartGets(char str[]) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	int i=0;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 800067c:	f7ff ffc6 	bl	800060c <UartGetch>
 8000680:	4603      	mov	r3, r0
 8000682:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	7afa      	ldrb	r2, [r7, #11]
 800068c:	701a      	strb	r2, [r3, #0]
		i++;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3301      	adds	r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	2b0d      	cmp	r3, #13
 8000698:	d1f0      	bne.n	800067c <UartGets+0xc>
	str[i] = '\n';
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	220a      	movs	r2, #10
 80006a2:	701a      	strb	r2, [r3, #0]
	i++;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	3301      	adds	r3, #1
 80006a8:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	4413      	add	r3, r2
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006bc:	480d      	ldr	r0, [pc, #52]	@ (80006f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c0:	f7ff fee8 	bl	8000494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c4:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006c6:	490d      	ldr	r1, [pc, #52]	@ (80006fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000700 <LoopForever+0xe>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006cc:	e002      	b.n	80006d4 <LoopCopyDataInit>

080006ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d2:	3304      	adds	r3, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d8:	d3f9      	bcc.n	80006ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006da:	4a0a      	ldr	r2, [pc, #40]	@ (8000704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000708 <LoopForever+0x16>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e0:	e001      	b.n	80006e6 <LoopFillZerobss>

080006e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e4:	3204      	adds	r2, #4

080006e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e8:	d3fb      	bcc.n	80006e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ea:	f000 f843 	bl	8000774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ee:	f7ff fe51 	bl	8000394 <main>

080006f2 <LoopForever>:

LoopForever:
  b LoopForever
 80006f2:	e7fe      	b.n	80006f2 <LoopForever>
  ldr   r0, =_estack
 80006f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006fc:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000700:	08001504 	.word	0x08001504
  ldr r2, =_sbss
 8000704:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000708:	200001b8 	.word	0x200001b8

0800070c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800070c:	e7fe      	b.n	800070c <ADC_IRQHandler>
	...

08000710 <siscanf>:
 8000710:	b40e      	push	{r1, r2, r3}
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	b09c      	sub	sp, #112	@ 0x70
 8000716:	ac1f      	add	r4, sp, #124	@ 0x7c
 8000718:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800071c:	f854 5b04 	ldr.w	r5, [r4], #4
 8000720:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000724:	9002      	str	r0, [sp, #8]
 8000726:	9006      	str	r0, [sp, #24]
 8000728:	f7ff fd52 	bl	80001d0 <strlen>
 800072c:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <siscanf+0x4c>)
 800072e:	9003      	str	r0, [sp, #12]
 8000730:	9007      	str	r0, [sp, #28]
 8000732:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000734:	480a      	ldr	r0, [pc, #40]	@ (8000760 <siscanf+0x50>)
 8000736:	9401      	str	r4, [sp, #4]
 8000738:	2300      	movs	r3, #0
 800073a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800073c:	9314      	str	r3, [sp, #80]	@ 0x50
 800073e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000742:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000746:	462a      	mov	r2, r5
 8000748:	4623      	mov	r3, r4
 800074a:	a902      	add	r1, sp, #8
 800074c:	6800      	ldr	r0, [r0, #0]
 800074e:	f000 f987 	bl	8000a60 <__ssvfiscanf_r>
 8000752:	b01c      	add	sp, #112	@ 0x70
 8000754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000758:	b003      	add	sp, #12
 800075a:	4770      	bx	lr
 800075c:	08000765 	.word	0x08000765
 8000760:	20000000 	.word	0x20000000

08000764 <__seofread>:
 8000764:	2000      	movs	r0, #0
 8000766:	4770      	bx	lr

08000768 <__errno>:
 8000768:	4b01      	ldr	r3, [pc, #4]	@ (8000770 <__errno+0x8>)
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000000 	.word	0x20000000

08000774 <__libc_init_array>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	4d0d      	ldr	r5, [pc, #52]	@ (80007ac <__libc_init_array+0x38>)
 8000778:	4c0d      	ldr	r4, [pc, #52]	@ (80007b0 <__libc_init_array+0x3c>)
 800077a:	1b64      	subs	r4, r4, r5
 800077c:	10a4      	asrs	r4, r4, #2
 800077e:	2600      	movs	r6, #0
 8000780:	42a6      	cmp	r6, r4
 8000782:	d109      	bne.n	8000798 <__libc_init_array+0x24>
 8000784:	4d0b      	ldr	r5, [pc, #44]	@ (80007b4 <__libc_init_array+0x40>)
 8000786:	4c0c      	ldr	r4, [pc, #48]	@ (80007b8 <__libc_init_array+0x44>)
 8000788:	f000 fde0 	bl	800134c <_init>
 800078c:	1b64      	subs	r4, r4, r5
 800078e:	10a4      	asrs	r4, r4, #2
 8000790:	2600      	movs	r6, #0
 8000792:	42a6      	cmp	r6, r4
 8000794:	d105      	bne.n	80007a2 <__libc_init_array+0x2e>
 8000796:	bd70      	pop	{r4, r5, r6, pc}
 8000798:	f855 3b04 	ldr.w	r3, [r5], #4
 800079c:	4798      	blx	r3
 800079e:	3601      	adds	r6, #1
 80007a0:	e7ee      	b.n	8000780 <__libc_init_array+0xc>
 80007a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a6:	4798      	blx	r3
 80007a8:	3601      	adds	r6, #1
 80007aa:	e7f2      	b.n	8000792 <__libc_init_array+0x1e>
 80007ac:	080014fc 	.word	0x080014fc
 80007b0:	080014fc 	.word	0x080014fc
 80007b4:	080014fc 	.word	0x080014fc
 80007b8:	08001500 	.word	0x08001500

080007bc <__retarget_lock_acquire_recursive>:
 80007bc:	4770      	bx	lr

080007be <__retarget_lock_release_recursive>:
 80007be:	4770      	bx	lr

080007c0 <_free_r>:
 80007c0:	b538      	push	{r3, r4, r5, lr}
 80007c2:	4605      	mov	r5, r0
 80007c4:	2900      	cmp	r1, #0
 80007c6:	d041      	beq.n	800084c <_free_r+0x8c>
 80007c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80007cc:	1f0c      	subs	r4, r1, #4
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	bfb8      	it	lt
 80007d2:	18e4      	addlt	r4, r4, r3
 80007d4:	f000 f8e0 	bl	8000998 <__malloc_lock>
 80007d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000850 <_free_r+0x90>)
 80007da:	6813      	ldr	r3, [r2, #0]
 80007dc:	b933      	cbnz	r3, 80007ec <_free_r+0x2c>
 80007de:	6063      	str	r3, [r4, #4]
 80007e0:	6014      	str	r4, [r2, #0]
 80007e2:	4628      	mov	r0, r5
 80007e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80007e8:	f000 b8dc 	b.w	80009a4 <__malloc_unlock>
 80007ec:	42a3      	cmp	r3, r4
 80007ee:	d908      	bls.n	8000802 <_free_r+0x42>
 80007f0:	6820      	ldr	r0, [r4, #0]
 80007f2:	1821      	adds	r1, r4, r0
 80007f4:	428b      	cmp	r3, r1
 80007f6:	bf01      	itttt	eq
 80007f8:	6819      	ldreq	r1, [r3, #0]
 80007fa:	685b      	ldreq	r3, [r3, #4]
 80007fc:	1809      	addeq	r1, r1, r0
 80007fe:	6021      	streq	r1, [r4, #0]
 8000800:	e7ed      	b.n	80007de <_free_r+0x1e>
 8000802:	461a      	mov	r2, r3
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	b10b      	cbz	r3, 800080c <_free_r+0x4c>
 8000808:	42a3      	cmp	r3, r4
 800080a:	d9fa      	bls.n	8000802 <_free_r+0x42>
 800080c:	6811      	ldr	r1, [r2, #0]
 800080e:	1850      	adds	r0, r2, r1
 8000810:	42a0      	cmp	r0, r4
 8000812:	d10b      	bne.n	800082c <_free_r+0x6c>
 8000814:	6820      	ldr	r0, [r4, #0]
 8000816:	4401      	add	r1, r0
 8000818:	1850      	adds	r0, r2, r1
 800081a:	4283      	cmp	r3, r0
 800081c:	6011      	str	r1, [r2, #0]
 800081e:	d1e0      	bne.n	80007e2 <_free_r+0x22>
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	6053      	str	r3, [r2, #4]
 8000826:	4408      	add	r0, r1
 8000828:	6010      	str	r0, [r2, #0]
 800082a:	e7da      	b.n	80007e2 <_free_r+0x22>
 800082c:	d902      	bls.n	8000834 <_free_r+0x74>
 800082e:	230c      	movs	r3, #12
 8000830:	602b      	str	r3, [r5, #0]
 8000832:	e7d6      	b.n	80007e2 <_free_r+0x22>
 8000834:	6820      	ldr	r0, [r4, #0]
 8000836:	1821      	adds	r1, r4, r0
 8000838:	428b      	cmp	r3, r1
 800083a:	bf04      	itt	eq
 800083c:	6819      	ldreq	r1, [r3, #0]
 800083e:	685b      	ldreq	r3, [r3, #4]
 8000840:	6063      	str	r3, [r4, #4]
 8000842:	bf04      	itt	eq
 8000844:	1809      	addeq	r1, r1, r0
 8000846:	6021      	streq	r1, [r4, #0]
 8000848:	6054      	str	r4, [r2, #4]
 800084a:	e7ca      	b.n	80007e2 <_free_r+0x22>
 800084c:	bd38      	pop	{r3, r4, r5, pc}
 800084e:	bf00      	nop
 8000850:	200001b4 	.word	0x200001b4

08000854 <sbrk_aligned>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	4e0f      	ldr	r6, [pc, #60]	@ (8000894 <sbrk_aligned+0x40>)
 8000858:	460c      	mov	r4, r1
 800085a:	6831      	ldr	r1, [r6, #0]
 800085c:	4605      	mov	r5, r0
 800085e:	b911      	cbnz	r1, 8000866 <sbrk_aligned+0x12>
 8000860:	f000 fc34 	bl	80010cc <_sbrk_r>
 8000864:	6030      	str	r0, [r6, #0]
 8000866:	4621      	mov	r1, r4
 8000868:	4628      	mov	r0, r5
 800086a:	f000 fc2f 	bl	80010cc <_sbrk_r>
 800086e:	1c43      	adds	r3, r0, #1
 8000870:	d103      	bne.n	800087a <sbrk_aligned+0x26>
 8000872:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000876:	4620      	mov	r0, r4
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	1cc4      	adds	r4, r0, #3
 800087c:	f024 0403 	bic.w	r4, r4, #3
 8000880:	42a0      	cmp	r0, r4
 8000882:	d0f8      	beq.n	8000876 <sbrk_aligned+0x22>
 8000884:	1a21      	subs	r1, r4, r0
 8000886:	4628      	mov	r0, r5
 8000888:	f000 fc20 	bl	80010cc <_sbrk_r>
 800088c:	3001      	adds	r0, #1
 800088e:	d1f2      	bne.n	8000876 <sbrk_aligned+0x22>
 8000890:	e7ef      	b.n	8000872 <sbrk_aligned+0x1e>
 8000892:	bf00      	nop
 8000894:	200001b0 	.word	0x200001b0

08000898 <_malloc_r>:
 8000898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800089c:	1ccd      	adds	r5, r1, #3
 800089e:	f025 0503 	bic.w	r5, r5, #3
 80008a2:	3508      	adds	r5, #8
 80008a4:	2d0c      	cmp	r5, #12
 80008a6:	bf38      	it	cc
 80008a8:	250c      	movcc	r5, #12
 80008aa:	2d00      	cmp	r5, #0
 80008ac:	4606      	mov	r6, r0
 80008ae:	db01      	blt.n	80008b4 <_malloc_r+0x1c>
 80008b0:	42a9      	cmp	r1, r5
 80008b2:	d904      	bls.n	80008be <_malloc_r+0x26>
 80008b4:	230c      	movs	r3, #12
 80008b6:	6033      	str	r3, [r6, #0]
 80008b8:	2000      	movs	r0, #0
 80008ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000994 <_malloc_r+0xfc>
 80008c2:	f000 f869 	bl	8000998 <__malloc_lock>
 80008c6:	f8d8 3000 	ldr.w	r3, [r8]
 80008ca:	461c      	mov	r4, r3
 80008cc:	bb44      	cbnz	r4, 8000920 <_malloc_r+0x88>
 80008ce:	4629      	mov	r1, r5
 80008d0:	4630      	mov	r0, r6
 80008d2:	f7ff ffbf 	bl	8000854 <sbrk_aligned>
 80008d6:	1c43      	adds	r3, r0, #1
 80008d8:	4604      	mov	r4, r0
 80008da:	d158      	bne.n	800098e <_malloc_r+0xf6>
 80008dc:	f8d8 4000 	ldr.w	r4, [r8]
 80008e0:	4627      	mov	r7, r4
 80008e2:	2f00      	cmp	r7, #0
 80008e4:	d143      	bne.n	800096e <_malloc_r+0xd6>
 80008e6:	2c00      	cmp	r4, #0
 80008e8:	d04b      	beq.n	8000982 <_malloc_r+0xea>
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	4639      	mov	r1, r7
 80008ee:	4630      	mov	r0, r6
 80008f0:	eb04 0903 	add.w	r9, r4, r3
 80008f4:	f000 fbea 	bl	80010cc <_sbrk_r>
 80008f8:	4581      	cmp	r9, r0
 80008fa:	d142      	bne.n	8000982 <_malloc_r+0xea>
 80008fc:	6821      	ldr	r1, [r4, #0]
 80008fe:	1a6d      	subs	r5, r5, r1
 8000900:	4629      	mov	r1, r5
 8000902:	4630      	mov	r0, r6
 8000904:	f7ff ffa6 	bl	8000854 <sbrk_aligned>
 8000908:	3001      	adds	r0, #1
 800090a:	d03a      	beq.n	8000982 <_malloc_r+0xea>
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	442b      	add	r3, r5
 8000910:	6023      	str	r3, [r4, #0]
 8000912:	f8d8 3000 	ldr.w	r3, [r8]
 8000916:	685a      	ldr	r2, [r3, #4]
 8000918:	bb62      	cbnz	r2, 8000974 <_malloc_r+0xdc>
 800091a:	f8c8 7000 	str.w	r7, [r8]
 800091e:	e00f      	b.n	8000940 <_malloc_r+0xa8>
 8000920:	6822      	ldr	r2, [r4, #0]
 8000922:	1b52      	subs	r2, r2, r5
 8000924:	d420      	bmi.n	8000968 <_malloc_r+0xd0>
 8000926:	2a0b      	cmp	r2, #11
 8000928:	d917      	bls.n	800095a <_malloc_r+0xc2>
 800092a:	1961      	adds	r1, r4, r5
 800092c:	42a3      	cmp	r3, r4
 800092e:	6025      	str	r5, [r4, #0]
 8000930:	bf18      	it	ne
 8000932:	6059      	strne	r1, [r3, #4]
 8000934:	6863      	ldr	r3, [r4, #4]
 8000936:	bf08      	it	eq
 8000938:	f8c8 1000 	streq.w	r1, [r8]
 800093c:	5162      	str	r2, [r4, r5]
 800093e:	604b      	str	r3, [r1, #4]
 8000940:	4630      	mov	r0, r6
 8000942:	f000 f82f 	bl	80009a4 <__malloc_unlock>
 8000946:	f104 000b 	add.w	r0, r4, #11
 800094a:	1d23      	adds	r3, r4, #4
 800094c:	f020 0007 	bic.w	r0, r0, #7
 8000950:	1ac2      	subs	r2, r0, r3
 8000952:	bf1c      	itt	ne
 8000954:	1a1b      	subne	r3, r3, r0
 8000956:	50a3      	strne	r3, [r4, r2]
 8000958:	e7af      	b.n	80008ba <_malloc_r+0x22>
 800095a:	6862      	ldr	r2, [r4, #4]
 800095c:	42a3      	cmp	r3, r4
 800095e:	bf0c      	ite	eq
 8000960:	f8c8 2000 	streq.w	r2, [r8]
 8000964:	605a      	strne	r2, [r3, #4]
 8000966:	e7eb      	b.n	8000940 <_malloc_r+0xa8>
 8000968:	4623      	mov	r3, r4
 800096a:	6864      	ldr	r4, [r4, #4]
 800096c:	e7ae      	b.n	80008cc <_malloc_r+0x34>
 800096e:	463c      	mov	r4, r7
 8000970:	687f      	ldr	r7, [r7, #4]
 8000972:	e7b6      	b.n	80008e2 <_malloc_r+0x4a>
 8000974:	461a      	mov	r2, r3
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	42a3      	cmp	r3, r4
 800097a:	d1fb      	bne.n	8000974 <_malloc_r+0xdc>
 800097c:	2300      	movs	r3, #0
 800097e:	6053      	str	r3, [r2, #4]
 8000980:	e7de      	b.n	8000940 <_malloc_r+0xa8>
 8000982:	230c      	movs	r3, #12
 8000984:	6033      	str	r3, [r6, #0]
 8000986:	4630      	mov	r0, r6
 8000988:	f000 f80c 	bl	80009a4 <__malloc_unlock>
 800098c:	e794      	b.n	80008b8 <_malloc_r+0x20>
 800098e:	6005      	str	r5, [r0, #0]
 8000990:	e7d6      	b.n	8000940 <_malloc_r+0xa8>
 8000992:	bf00      	nop
 8000994:	200001b4 	.word	0x200001b4

08000998 <__malloc_lock>:
 8000998:	4801      	ldr	r0, [pc, #4]	@ (80009a0 <__malloc_lock+0x8>)
 800099a:	f7ff bf0f 	b.w	80007bc <__retarget_lock_acquire_recursive>
 800099e:	bf00      	nop
 80009a0:	200001ac 	.word	0x200001ac

080009a4 <__malloc_unlock>:
 80009a4:	4801      	ldr	r0, [pc, #4]	@ (80009ac <__malloc_unlock+0x8>)
 80009a6:	f7ff bf0a 	b.w	80007be <__retarget_lock_release_recursive>
 80009aa:	bf00      	nop
 80009ac:	200001ac 	.word	0x200001ac

080009b0 <_sungetc_r>:
 80009b0:	b538      	push	{r3, r4, r5, lr}
 80009b2:	1c4b      	adds	r3, r1, #1
 80009b4:	4614      	mov	r4, r2
 80009b6:	d103      	bne.n	80009c0 <_sungetc_r+0x10>
 80009b8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80009bc:	4628      	mov	r0, r5
 80009be:	bd38      	pop	{r3, r4, r5, pc}
 80009c0:	8993      	ldrh	r3, [r2, #12]
 80009c2:	f023 0320 	bic.w	r3, r3, #32
 80009c6:	8193      	strh	r3, [r2, #12]
 80009c8:	6853      	ldr	r3, [r2, #4]
 80009ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80009cc:	b2cd      	uxtb	r5, r1
 80009ce:	b18a      	cbz	r2, 80009f4 <_sungetc_r+0x44>
 80009d0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80009d2:	429a      	cmp	r2, r3
 80009d4:	dd08      	ble.n	80009e8 <_sungetc_r+0x38>
 80009d6:	6823      	ldr	r3, [r4, #0]
 80009d8:	1e5a      	subs	r2, r3, #1
 80009da:	6022      	str	r2, [r4, #0]
 80009dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80009e0:	6863      	ldr	r3, [r4, #4]
 80009e2:	3301      	adds	r3, #1
 80009e4:	6063      	str	r3, [r4, #4]
 80009e6:	e7e9      	b.n	80009bc <_sungetc_r+0xc>
 80009e8:	4621      	mov	r1, r4
 80009ea:	f000 fb34 	bl	8001056 <__submore>
 80009ee:	2800      	cmp	r0, #0
 80009f0:	d0f1      	beq.n	80009d6 <_sungetc_r+0x26>
 80009f2:	e7e1      	b.n	80009b8 <_sungetc_r+0x8>
 80009f4:	6921      	ldr	r1, [r4, #16]
 80009f6:	6822      	ldr	r2, [r4, #0]
 80009f8:	b141      	cbz	r1, 8000a0c <_sungetc_r+0x5c>
 80009fa:	4291      	cmp	r1, r2
 80009fc:	d206      	bcs.n	8000a0c <_sungetc_r+0x5c>
 80009fe:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8000a02:	42a9      	cmp	r1, r5
 8000a04:	d102      	bne.n	8000a0c <_sungetc_r+0x5c>
 8000a06:	3a01      	subs	r2, #1
 8000a08:	6022      	str	r2, [r4, #0]
 8000a0a:	e7ea      	b.n	80009e2 <_sungetc_r+0x32>
 8000a0c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8000a10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000a14:	6363      	str	r3, [r4, #52]	@ 0x34
 8000a16:	2303      	movs	r3, #3
 8000a18:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000a1a:	4623      	mov	r3, r4
 8000a1c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000a20:	6023      	str	r3, [r4, #0]
 8000a22:	2301      	movs	r3, #1
 8000a24:	e7de      	b.n	80009e4 <_sungetc_r+0x34>

08000a26 <__ssrefill_r>:
 8000a26:	b510      	push	{r4, lr}
 8000a28:	460c      	mov	r4, r1
 8000a2a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8000a2c:	b169      	cbz	r1, 8000a4a <__ssrefill_r+0x24>
 8000a2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000a32:	4299      	cmp	r1, r3
 8000a34:	d001      	beq.n	8000a3a <__ssrefill_r+0x14>
 8000a36:	f7ff fec3 	bl	80007c0 <_free_r>
 8000a3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000a3c:	6063      	str	r3, [r4, #4]
 8000a3e:	2000      	movs	r0, #0
 8000a40:	6360      	str	r0, [r4, #52]	@ 0x34
 8000a42:	b113      	cbz	r3, 8000a4a <__ssrefill_r+0x24>
 8000a44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000a46:	6023      	str	r3, [r4, #0]
 8000a48:	bd10      	pop	{r4, pc}
 8000a4a:	6923      	ldr	r3, [r4, #16]
 8000a4c:	6023      	str	r3, [r4, #0]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	6063      	str	r3, [r4, #4]
 8000a52:	89a3      	ldrh	r3, [r4, #12]
 8000a54:	f043 0320 	orr.w	r3, r3, #32
 8000a58:	81a3      	strh	r3, [r4, #12]
 8000a5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a5e:	e7f3      	b.n	8000a48 <__ssrefill_r+0x22>

08000a60 <__ssvfiscanf_r>:
 8000a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a64:	460c      	mov	r4, r1
 8000a66:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8000a70:	49a5      	ldr	r1, [pc, #660]	@ (8000d08 <__ssvfiscanf_r+0x2a8>)
 8000a72:	91a0      	str	r1, [sp, #640]	@ 0x280
 8000a74:	f10d 0804 	add.w	r8, sp, #4
 8000a78:	49a4      	ldr	r1, [pc, #656]	@ (8000d0c <__ssvfiscanf_r+0x2ac>)
 8000a7a:	4fa5      	ldr	r7, [pc, #660]	@ (8000d10 <__ssvfiscanf_r+0x2b0>)
 8000a7c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8000a80:	4606      	mov	r6, r0
 8000a82:	91a1      	str	r1, [sp, #644]	@ 0x284
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	7813      	ldrb	r3, [r2, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	f000 8158 	beq.w	8000d3e <__ssvfiscanf_r+0x2de>
 8000a8e:	5cf9      	ldrb	r1, [r7, r3]
 8000a90:	f011 0108 	ands.w	r1, r1, #8
 8000a94:	f102 0501 	add.w	r5, r2, #1
 8000a98:	d019      	beq.n	8000ace <__ssvfiscanf_r+0x6e>
 8000a9a:	6863      	ldr	r3, [r4, #4]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	dd0f      	ble.n	8000ac0 <__ssvfiscanf_r+0x60>
 8000aa0:	6823      	ldr	r3, [r4, #0]
 8000aa2:	781a      	ldrb	r2, [r3, #0]
 8000aa4:	5cba      	ldrb	r2, [r7, r2]
 8000aa6:	0712      	lsls	r2, r2, #28
 8000aa8:	d401      	bmi.n	8000aae <__ssvfiscanf_r+0x4e>
 8000aaa:	462a      	mov	r2, r5
 8000aac:	e7eb      	b.n	8000a86 <__ssvfiscanf_r+0x26>
 8000aae:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000ab0:	3201      	adds	r2, #1
 8000ab2:	9245      	str	r2, [sp, #276]	@ 0x114
 8000ab4:	6862      	ldr	r2, [r4, #4]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	3a01      	subs	r2, #1
 8000aba:	6062      	str	r2, [r4, #4]
 8000abc:	6023      	str	r3, [r4, #0]
 8000abe:	e7ec      	b.n	8000a9a <__ssvfiscanf_r+0x3a>
 8000ac0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000ac2:	4621      	mov	r1, r4
 8000ac4:	4630      	mov	r0, r6
 8000ac6:	4798      	blx	r3
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	d0e9      	beq.n	8000aa0 <__ssvfiscanf_r+0x40>
 8000acc:	e7ed      	b.n	8000aaa <__ssvfiscanf_r+0x4a>
 8000ace:	2b25      	cmp	r3, #37	@ 0x25
 8000ad0:	d012      	beq.n	8000af8 <__ssvfiscanf_r+0x98>
 8000ad2:	4699      	mov	r9, r3
 8000ad4:	6863      	ldr	r3, [r4, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f340 8093 	ble.w	8000c02 <__ssvfiscanf_r+0x1a2>
 8000adc:	6822      	ldr	r2, [r4, #0]
 8000ade:	7813      	ldrb	r3, [r2, #0]
 8000ae0:	454b      	cmp	r3, r9
 8000ae2:	f040 812c 	bne.w	8000d3e <__ssvfiscanf_r+0x2de>
 8000ae6:	6863      	ldr	r3, [r4, #4]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	6063      	str	r3, [r4, #4]
 8000aec:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8000aee:	3201      	adds	r2, #1
 8000af0:	3301      	adds	r3, #1
 8000af2:	6022      	str	r2, [r4, #0]
 8000af4:	9345      	str	r3, [sp, #276]	@ 0x114
 8000af6:	e7d8      	b.n	8000aaa <__ssvfiscanf_r+0x4a>
 8000af8:	9141      	str	r1, [sp, #260]	@ 0x104
 8000afa:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000afc:	7853      	ldrb	r3, [r2, #1]
 8000afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b00:	bf02      	ittt	eq
 8000b02:	2310      	moveq	r3, #16
 8000b04:	1c95      	addeq	r5, r2, #2
 8000b06:	9341      	streq	r3, [sp, #260]	@ 0x104
 8000b08:	220a      	movs	r2, #10
 8000b0a:	46a9      	mov	r9, r5
 8000b0c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8000b10:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8000b14:	2b09      	cmp	r3, #9
 8000b16:	d91e      	bls.n	8000b56 <__ssvfiscanf_r+0xf6>
 8000b18:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8000d14 <__ssvfiscanf_r+0x2b4>
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	4650      	mov	r0, sl
 8000b20:	f7ff fb5e 	bl	80001e0 <memchr>
 8000b24:	b138      	cbz	r0, 8000b36 <__ssvfiscanf_r+0xd6>
 8000b26:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000b28:	eba0 000a 	sub.w	r0, r0, sl
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	4083      	lsls	r3, r0
 8000b30:	4313      	orrs	r3, r2
 8000b32:	9341      	str	r3, [sp, #260]	@ 0x104
 8000b34:	464d      	mov	r5, r9
 8000b36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000b3a:	2b78      	cmp	r3, #120	@ 0x78
 8000b3c:	d806      	bhi.n	8000b4c <__ssvfiscanf_r+0xec>
 8000b3e:	2b57      	cmp	r3, #87	@ 0x57
 8000b40:	d810      	bhi.n	8000b64 <__ssvfiscanf_r+0x104>
 8000b42:	2b25      	cmp	r3, #37	@ 0x25
 8000b44:	d0c5      	beq.n	8000ad2 <__ssvfiscanf_r+0x72>
 8000b46:	d857      	bhi.n	8000bf8 <__ssvfiscanf_r+0x198>
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d065      	beq.n	8000c18 <__ssvfiscanf_r+0x1b8>
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000b50:	230a      	movs	r3, #10
 8000b52:	9342      	str	r3, [sp, #264]	@ 0x108
 8000b54:	e078      	b.n	8000c48 <__ssvfiscanf_r+0x1e8>
 8000b56:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8000b58:	fb02 1103 	mla	r1, r2, r3, r1
 8000b5c:	3930      	subs	r1, #48	@ 0x30
 8000b5e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000b60:	464d      	mov	r5, r9
 8000b62:	e7d2      	b.n	8000b0a <__ssvfiscanf_r+0xaa>
 8000b64:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8000b68:	2a20      	cmp	r2, #32
 8000b6a:	d8ef      	bhi.n	8000b4c <__ssvfiscanf_r+0xec>
 8000b6c:	a101      	add	r1, pc, #4	@ (adr r1, 8000b74 <__ssvfiscanf_r+0x114>)
 8000b6e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000b72:	bf00      	nop
 8000b74:	08000c27 	.word	0x08000c27
 8000b78:	08000b4d 	.word	0x08000b4d
 8000b7c:	08000b4d 	.word	0x08000b4d
 8000b80:	08000c81 	.word	0x08000c81
 8000b84:	08000b4d 	.word	0x08000b4d
 8000b88:	08000b4d 	.word	0x08000b4d
 8000b8c:	08000b4d 	.word	0x08000b4d
 8000b90:	08000b4d 	.word	0x08000b4d
 8000b94:	08000b4d 	.word	0x08000b4d
 8000b98:	08000b4d 	.word	0x08000b4d
 8000b9c:	08000b4d 	.word	0x08000b4d
 8000ba0:	08000c97 	.word	0x08000c97
 8000ba4:	08000c7d 	.word	0x08000c7d
 8000ba8:	08000bff 	.word	0x08000bff
 8000bac:	08000bff 	.word	0x08000bff
 8000bb0:	08000bff 	.word	0x08000bff
 8000bb4:	08000b4d 	.word	0x08000b4d
 8000bb8:	08000c39 	.word	0x08000c39
 8000bbc:	08000b4d 	.word	0x08000b4d
 8000bc0:	08000b4d 	.word	0x08000b4d
 8000bc4:	08000b4d 	.word	0x08000b4d
 8000bc8:	08000b4d 	.word	0x08000b4d
 8000bcc:	08000ca7 	.word	0x08000ca7
 8000bd0:	08000c41 	.word	0x08000c41
 8000bd4:	08000c1f 	.word	0x08000c1f
 8000bd8:	08000b4d 	.word	0x08000b4d
 8000bdc:	08000b4d 	.word	0x08000b4d
 8000be0:	08000ca3 	.word	0x08000ca3
 8000be4:	08000b4d 	.word	0x08000b4d
 8000be8:	08000c7d 	.word	0x08000c7d
 8000bec:	08000b4d 	.word	0x08000b4d
 8000bf0:	08000b4d 	.word	0x08000b4d
 8000bf4:	08000c27 	.word	0x08000c27
 8000bf8:	3b45      	subs	r3, #69	@ 0x45
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d8a6      	bhi.n	8000b4c <__ssvfiscanf_r+0xec>
 8000bfe:	2305      	movs	r3, #5
 8000c00:	e021      	b.n	8000c46 <__ssvfiscanf_r+0x1e6>
 8000c02:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000c04:	4621      	mov	r1, r4
 8000c06:	4630      	mov	r0, r6
 8000c08:	4798      	blx	r3
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	f43f af66 	beq.w	8000adc <__ssvfiscanf_r+0x7c>
 8000c10:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8000c12:	2800      	cmp	r0, #0
 8000c14:	f040 808b 	bne.w	8000d2e <__ssvfiscanf_r+0x2ce>
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c1c:	e08b      	b.n	8000d36 <__ssvfiscanf_r+0x2d6>
 8000c1e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000c20:	f042 0220 	orr.w	r2, r2, #32
 8000c24:	9241      	str	r2, [sp, #260]	@ 0x104
 8000c26:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000c28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c2c:	9241      	str	r2, [sp, #260]	@ 0x104
 8000c2e:	2210      	movs	r2, #16
 8000c30:	2b6e      	cmp	r3, #110	@ 0x6e
 8000c32:	9242      	str	r2, [sp, #264]	@ 0x108
 8000c34:	d902      	bls.n	8000c3c <__ssvfiscanf_r+0x1dc>
 8000c36:	e005      	b.n	8000c44 <__ssvfiscanf_r+0x1e4>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	9342      	str	r3, [sp, #264]	@ 0x108
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e002      	b.n	8000c46 <__ssvfiscanf_r+0x1e6>
 8000c40:	2308      	movs	r3, #8
 8000c42:	9342      	str	r3, [sp, #264]	@ 0x108
 8000c44:	2304      	movs	r3, #4
 8000c46:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000c48:	6863      	ldr	r3, [r4, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	dd39      	ble.n	8000cc2 <__ssvfiscanf_r+0x262>
 8000c4e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000c50:	0659      	lsls	r1, r3, #25
 8000c52:	d404      	bmi.n	8000c5e <__ssvfiscanf_r+0x1fe>
 8000c54:	6823      	ldr	r3, [r4, #0]
 8000c56:	781a      	ldrb	r2, [r3, #0]
 8000c58:	5cba      	ldrb	r2, [r7, r2]
 8000c5a:	0712      	lsls	r2, r2, #28
 8000c5c:	d438      	bmi.n	8000cd0 <__ssvfiscanf_r+0x270>
 8000c5e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	dc47      	bgt.n	8000cf4 <__ssvfiscanf_r+0x294>
 8000c64:	466b      	mov	r3, sp
 8000c66:	4622      	mov	r2, r4
 8000c68:	a941      	add	r1, sp, #260	@ 0x104
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	f000 f86c 	bl	8000d48 <_scanf_chars>
 8000c70:	2801      	cmp	r0, #1
 8000c72:	d064      	beq.n	8000d3e <__ssvfiscanf_r+0x2de>
 8000c74:	2802      	cmp	r0, #2
 8000c76:	f47f af18 	bne.w	8000aaa <__ssvfiscanf_r+0x4a>
 8000c7a:	e7c9      	b.n	8000c10 <__ssvfiscanf_r+0x1b0>
 8000c7c:	220a      	movs	r2, #10
 8000c7e:	e7d7      	b.n	8000c30 <__ssvfiscanf_r+0x1d0>
 8000c80:	4629      	mov	r1, r5
 8000c82:	4640      	mov	r0, r8
 8000c84:	f000 f9ae 	bl	8000fe4 <__sccl>
 8000c88:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c8e:	9341      	str	r3, [sp, #260]	@ 0x104
 8000c90:	4605      	mov	r5, r0
 8000c92:	2301      	movs	r3, #1
 8000c94:	e7d7      	b.n	8000c46 <__ssvfiscanf_r+0x1e6>
 8000c96:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000c98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c9c:	9341      	str	r3, [sp, #260]	@ 0x104
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e7d1      	b.n	8000c46 <__ssvfiscanf_r+0x1e6>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	e7cf      	b.n	8000c46 <__ssvfiscanf_r+0x1e6>
 8000ca6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8000ca8:	06c3      	lsls	r3, r0, #27
 8000caa:	f53f aefe 	bmi.w	8000aaa <__ssvfiscanf_r+0x4a>
 8000cae:	9b00      	ldr	r3, [sp, #0]
 8000cb0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000cb2:	1d19      	adds	r1, r3, #4
 8000cb4:	9100      	str	r1, [sp, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	07c0      	lsls	r0, r0, #31
 8000cba:	bf4c      	ite	mi
 8000cbc:	801a      	strhmi	r2, [r3, #0]
 8000cbe:	601a      	strpl	r2, [r3, #0]
 8000cc0:	e6f3      	b.n	8000aaa <__ssvfiscanf_r+0x4a>
 8000cc2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000cc4:	4621      	mov	r1, r4
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	4798      	blx	r3
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	d0bf      	beq.n	8000c4e <__ssvfiscanf_r+0x1ee>
 8000cce:	e79f      	b.n	8000c10 <__ssvfiscanf_r+0x1b0>
 8000cd0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000cd2:	3201      	adds	r2, #1
 8000cd4:	9245      	str	r2, [sp, #276]	@ 0x114
 8000cd6:	6862      	ldr	r2, [r4, #4]
 8000cd8:	3a01      	subs	r2, #1
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	6062      	str	r2, [r4, #4]
 8000cde:	dd02      	ble.n	8000ce6 <__ssvfiscanf_r+0x286>
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	6023      	str	r3, [r4, #0]
 8000ce4:	e7b6      	b.n	8000c54 <__ssvfiscanf_r+0x1f4>
 8000ce6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000ce8:	4621      	mov	r1, r4
 8000cea:	4630      	mov	r0, r6
 8000cec:	4798      	blx	r3
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	d0b0      	beq.n	8000c54 <__ssvfiscanf_r+0x1f4>
 8000cf2:	e78d      	b.n	8000c10 <__ssvfiscanf_r+0x1b0>
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	dc0f      	bgt.n	8000d18 <__ssvfiscanf_r+0x2b8>
 8000cf8:	466b      	mov	r3, sp
 8000cfa:	4622      	mov	r2, r4
 8000cfc:	a941      	add	r1, sp, #260	@ 0x104
 8000cfe:	4630      	mov	r0, r6
 8000d00:	f000 f87c 	bl	8000dfc <_scanf_i>
 8000d04:	e7b4      	b.n	8000c70 <__ssvfiscanf_r+0x210>
 8000d06:	bf00      	nop
 8000d08:	080009b1 	.word	0x080009b1
 8000d0c:	08000a27 	.word	0x08000a27
 8000d10:	080013f4 	.word	0x080013f4
 8000d14:	080013d4 	.word	0x080013d4
 8000d18:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <__ssvfiscanf_r+0x2e4>)
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f43f aec5 	beq.w	8000aaa <__ssvfiscanf_r+0x4a>
 8000d20:	466b      	mov	r3, sp
 8000d22:	4622      	mov	r2, r4
 8000d24:	a941      	add	r1, sp, #260	@ 0x104
 8000d26:	4630      	mov	r0, r6
 8000d28:	f3af 8000 	nop.w
 8000d2c:	e7a0      	b.n	8000c70 <__ssvfiscanf_r+0x210>
 8000d2e:	89a3      	ldrh	r3, [r4, #12]
 8000d30:	065b      	lsls	r3, r3, #25
 8000d32:	f53f af71 	bmi.w	8000c18 <__ssvfiscanf_r+0x1b8>
 8000d36:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8000d40:	e7f9      	b.n	8000d36 <__ssvfiscanf_r+0x2d6>
 8000d42:	bf00      	nop
 8000d44:	00000000 	.word	0x00000000

08000d48 <_scanf_chars>:
 8000d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d4c:	4615      	mov	r5, r2
 8000d4e:	688a      	ldr	r2, [r1, #8]
 8000d50:	4680      	mov	r8, r0
 8000d52:	460c      	mov	r4, r1
 8000d54:	b932      	cbnz	r2, 8000d64 <_scanf_chars+0x1c>
 8000d56:	698a      	ldr	r2, [r1, #24]
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	bf14      	ite	ne
 8000d5c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8000d60:	2201      	moveq	r2, #1
 8000d62:	608a      	str	r2, [r1, #8]
 8000d64:	6822      	ldr	r2, [r4, #0]
 8000d66:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8000df8 <_scanf_chars+0xb0>
 8000d6a:	06d1      	lsls	r1, r2, #27
 8000d6c:	bf5f      	itttt	pl
 8000d6e:	681a      	ldrpl	r2, [r3, #0]
 8000d70:	1d11      	addpl	r1, r2, #4
 8000d72:	6019      	strpl	r1, [r3, #0]
 8000d74:	6816      	ldrpl	r6, [r2, #0]
 8000d76:	2700      	movs	r7, #0
 8000d78:	69a0      	ldr	r0, [r4, #24]
 8000d7a:	b188      	cbz	r0, 8000da0 <_scanf_chars+0x58>
 8000d7c:	2801      	cmp	r0, #1
 8000d7e:	d107      	bne.n	8000d90 <_scanf_chars+0x48>
 8000d80:	682b      	ldr	r3, [r5, #0]
 8000d82:	781a      	ldrb	r2, [r3, #0]
 8000d84:	6963      	ldr	r3, [r4, #20]
 8000d86:	5c9b      	ldrb	r3, [r3, r2]
 8000d88:	b953      	cbnz	r3, 8000da0 <_scanf_chars+0x58>
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d031      	beq.n	8000df2 <_scanf_chars+0xaa>
 8000d8e:	e022      	b.n	8000dd6 <_scanf_chars+0x8e>
 8000d90:	2802      	cmp	r0, #2
 8000d92:	d120      	bne.n	8000dd6 <_scanf_chars+0x8e>
 8000d94:	682b      	ldr	r3, [r5, #0]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	f819 3003 	ldrb.w	r3, [r9, r3]
 8000d9c:	071b      	lsls	r3, r3, #28
 8000d9e:	d41a      	bmi.n	8000dd6 <_scanf_chars+0x8e>
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	06da      	lsls	r2, r3, #27
 8000da4:	bf5e      	ittt	pl
 8000da6:	682b      	ldrpl	r3, [r5, #0]
 8000da8:	781b      	ldrbpl	r3, [r3, #0]
 8000daa:	f806 3b01 	strbpl.w	r3, [r6], #1
 8000dae:	682a      	ldr	r2, [r5, #0]
 8000db0:	686b      	ldr	r3, [r5, #4]
 8000db2:	3201      	adds	r2, #1
 8000db4:	602a      	str	r2, [r5, #0]
 8000db6:	68a2      	ldr	r2, [r4, #8]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	3a01      	subs	r2, #1
 8000dbc:	606b      	str	r3, [r5, #4]
 8000dbe:	3701      	adds	r7, #1
 8000dc0:	60a2      	str	r2, [r4, #8]
 8000dc2:	b142      	cbz	r2, 8000dd6 <_scanf_chars+0x8e>
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	dcd7      	bgt.n	8000d78 <_scanf_chars+0x30>
 8000dc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8000dcc:	4629      	mov	r1, r5
 8000dce:	4640      	mov	r0, r8
 8000dd0:	4798      	blx	r3
 8000dd2:	2800      	cmp	r0, #0
 8000dd4:	d0d0      	beq.n	8000d78 <_scanf_chars+0x30>
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	f013 0310 	ands.w	r3, r3, #16
 8000ddc:	d105      	bne.n	8000dea <_scanf_chars+0xa2>
 8000dde:	68e2      	ldr	r2, [r4, #12]
 8000de0:	3201      	adds	r2, #1
 8000de2:	60e2      	str	r2, [r4, #12]
 8000de4:	69a2      	ldr	r2, [r4, #24]
 8000de6:	b102      	cbz	r2, 8000dea <_scanf_chars+0xa2>
 8000de8:	7033      	strb	r3, [r6, #0]
 8000dea:	6923      	ldr	r3, [r4, #16]
 8000dec:	443b      	add	r3, r7
 8000dee:	6123      	str	r3, [r4, #16]
 8000df0:	2000      	movs	r0, #0
 8000df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000df6:	bf00      	nop
 8000df8:	080013f4 	.word	0x080013f4

08000dfc <_scanf_i>:
 8000dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e00:	4698      	mov	r8, r3
 8000e02:	4b74      	ldr	r3, [pc, #464]	@ (8000fd4 <_scanf_i+0x1d8>)
 8000e04:	460c      	mov	r4, r1
 8000e06:	4682      	mov	sl, r0
 8000e08:	4616      	mov	r6, r2
 8000e0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	ab03      	add	r3, sp, #12
 8000e12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000e16:	4b70      	ldr	r3, [pc, #448]	@ (8000fd8 <_scanf_i+0x1dc>)
 8000e18:	69a1      	ldr	r1, [r4, #24]
 8000e1a:	4a70      	ldr	r2, [pc, #448]	@ (8000fdc <_scanf_i+0x1e0>)
 8000e1c:	2903      	cmp	r1, #3
 8000e1e:	bf08      	it	eq
 8000e20:	461a      	moveq	r2, r3
 8000e22:	68a3      	ldr	r3, [r4, #8]
 8000e24:	9201      	str	r2, [sp, #4]
 8000e26:	1e5a      	subs	r2, r3, #1
 8000e28:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8000e2c:	bf88      	it	hi
 8000e2e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8000e32:	4627      	mov	r7, r4
 8000e34:	bf82      	ittt	hi
 8000e36:	eb03 0905 	addhi.w	r9, r3, r5
 8000e3a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8000e3e:	60a3      	strhi	r3, [r4, #8]
 8000e40:	f857 3b1c 	ldr.w	r3, [r7], #28
 8000e44:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8000e48:	bf98      	it	ls
 8000e4a:	f04f 0900 	movls.w	r9, #0
 8000e4e:	6023      	str	r3, [r4, #0]
 8000e50:	463d      	mov	r5, r7
 8000e52:	f04f 0b00 	mov.w	fp, #0
 8000e56:	6831      	ldr	r1, [r6, #0]
 8000e58:	ab03      	add	r3, sp, #12
 8000e5a:	7809      	ldrb	r1, [r1, #0]
 8000e5c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8000e60:	2202      	movs	r2, #2
 8000e62:	f7ff f9bd 	bl	80001e0 <memchr>
 8000e66:	b328      	cbz	r0, 8000eb4 <_scanf_i+0xb8>
 8000e68:	f1bb 0f01 	cmp.w	fp, #1
 8000e6c:	d159      	bne.n	8000f22 <_scanf_i+0x126>
 8000e6e:	6862      	ldr	r2, [r4, #4]
 8000e70:	b92a      	cbnz	r2, 8000e7e <_scanf_i+0x82>
 8000e72:	6822      	ldr	r2, [r4, #0]
 8000e74:	2108      	movs	r1, #8
 8000e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000e7a:	6061      	str	r1, [r4, #4]
 8000e7c:	6022      	str	r2, [r4, #0]
 8000e7e:	6822      	ldr	r2, [r4, #0]
 8000e80:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8000e84:	6022      	str	r2, [r4, #0]
 8000e86:	68a2      	ldr	r2, [r4, #8]
 8000e88:	1e51      	subs	r1, r2, #1
 8000e8a:	60a1      	str	r1, [r4, #8]
 8000e8c:	b192      	cbz	r2, 8000eb4 <_scanf_i+0xb8>
 8000e8e:	6832      	ldr	r2, [r6, #0]
 8000e90:	1c51      	adds	r1, r2, #1
 8000e92:	6031      	str	r1, [r6, #0]
 8000e94:	7812      	ldrb	r2, [r2, #0]
 8000e96:	f805 2b01 	strb.w	r2, [r5], #1
 8000e9a:	6872      	ldr	r2, [r6, #4]
 8000e9c:	3a01      	subs	r2, #1
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	6072      	str	r2, [r6, #4]
 8000ea2:	dc07      	bgt.n	8000eb4 <_scanf_i+0xb8>
 8000ea4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	4650      	mov	r0, sl
 8000eac:	4790      	blx	r2
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	f040 8085 	bne.w	8000fbe <_scanf_i+0x1c2>
 8000eb4:	f10b 0b01 	add.w	fp, fp, #1
 8000eb8:	f1bb 0f03 	cmp.w	fp, #3
 8000ebc:	d1cb      	bne.n	8000e56 <_scanf_i+0x5a>
 8000ebe:	6863      	ldr	r3, [r4, #4]
 8000ec0:	b90b      	cbnz	r3, 8000ec6 <_scanf_i+0xca>
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	6063      	str	r3, [r4, #4]
 8000ec6:	6863      	ldr	r3, [r4, #4]
 8000ec8:	4945      	ldr	r1, [pc, #276]	@ (8000fe0 <_scanf_i+0x1e4>)
 8000eca:	6960      	ldr	r0, [r4, #20]
 8000ecc:	1ac9      	subs	r1, r1, r3
 8000ece:	f000 f889 	bl	8000fe4 <__sccl>
 8000ed2:	f04f 0b00 	mov.w	fp, #0
 8000ed6:	68a3      	ldr	r3, [r4, #8]
 8000ed8:	6822      	ldr	r2, [r4, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d03d      	beq.n	8000f5a <_scanf_i+0x15e>
 8000ede:	6831      	ldr	r1, [r6, #0]
 8000ee0:	6960      	ldr	r0, [r4, #20]
 8000ee2:	f891 c000 	ldrb.w	ip, [r1]
 8000ee6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8000eea:	2800      	cmp	r0, #0
 8000eec:	d035      	beq.n	8000f5a <_scanf_i+0x15e>
 8000eee:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8000ef2:	d124      	bne.n	8000f3e <_scanf_i+0x142>
 8000ef4:	0510      	lsls	r0, r2, #20
 8000ef6:	d522      	bpl.n	8000f3e <_scanf_i+0x142>
 8000ef8:	f10b 0b01 	add.w	fp, fp, #1
 8000efc:	f1b9 0f00 	cmp.w	r9, #0
 8000f00:	d003      	beq.n	8000f0a <_scanf_i+0x10e>
 8000f02:	3301      	adds	r3, #1
 8000f04:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8000f08:	60a3      	str	r3, [r4, #8]
 8000f0a:	6873      	ldr	r3, [r6, #4]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	6073      	str	r3, [r6, #4]
 8000f12:	dd1b      	ble.n	8000f4c <_scanf_i+0x150>
 8000f14:	6833      	ldr	r3, [r6, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	6033      	str	r3, [r6, #0]
 8000f1a:	68a3      	ldr	r3, [r4, #8]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	60a3      	str	r3, [r4, #8]
 8000f20:	e7d9      	b.n	8000ed6 <_scanf_i+0xda>
 8000f22:	f1bb 0f02 	cmp.w	fp, #2
 8000f26:	d1ae      	bne.n	8000e86 <_scanf_i+0x8a>
 8000f28:	6822      	ldr	r2, [r4, #0]
 8000f2a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8000f2e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8000f32:	d1bf      	bne.n	8000eb4 <_scanf_i+0xb8>
 8000f34:	2110      	movs	r1, #16
 8000f36:	6061      	str	r1, [r4, #4]
 8000f38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f3c:	e7a2      	b.n	8000e84 <_scanf_i+0x88>
 8000f3e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8000f42:	6022      	str	r2, [r4, #0]
 8000f44:	780b      	ldrb	r3, [r1, #0]
 8000f46:	f805 3b01 	strb.w	r3, [r5], #1
 8000f4a:	e7de      	b.n	8000f0a <_scanf_i+0x10e>
 8000f4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8000f50:	4631      	mov	r1, r6
 8000f52:	4650      	mov	r0, sl
 8000f54:	4798      	blx	r3
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d0df      	beq.n	8000f1a <_scanf_i+0x11e>
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	05d9      	lsls	r1, r3, #23
 8000f5e:	d50d      	bpl.n	8000f7c <_scanf_i+0x180>
 8000f60:	42bd      	cmp	r5, r7
 8000f62:	d909      	bls.n	8000f78 <_scanf_i+0x17c>
 8000f64:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8000f68:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8000f6c:	4632      	mov	r2, r6
 8000f6e:	4650      	mov	r0, sl
 8000f70:	4798      	blx	r3
 8000f72:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8000f76:	464d      	mov	r5, r9
 8000f78:	42bd      	cmp	r5, r7
 8000f7a:	d028      	beq.n	8000fce <_scanf_i+0x1d2>
 8000f7c:	6822      	ldr	r2, [r4, #0]
 8000f7e:	f012 0210 	ands.w	r2, r2, #16
 8000f82:	d113      	bne.n	8000fac <_scanf_i+0x1b0>
 8000f84:	702a      	strb	r2, [r5, #0]
 8000f86:	6863      	ldr	r3, [r4, #4]
 8000f88:	9e01      	ldr	r6, [sp, #4]
 8000f8a:	4639      	mov	r1, r7
 8000f8c:	4650      	mov	r0, sl
 8000f8e:	47b0      	blx	r6
 8000f90:	f8d8 3000 	ldr.w	r3, [r8]
 8000f94:	6821      	ldr	r1, [r4, #0]
 8000f96:	1d1a      	adds	r2, r3, #4
 8000f98:	f8c8 2000 	str.w	r2, [r8]
 8000f9c:	f011 0f20 	tst.w	r1, #32
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	d00f      	beq.n	8000fc4 <_scanf_i+0x1c8>
 8000fa4:	6018      	str	r0, [r3, #0]
 8000fa6:	68e3      	ldr	r3, [r4, #12]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	60e3      	str	r3, [r4, #12]
 8000fac:	6923      	ldr	r3, [r4, #16]
 8000fae:	1bed      	subs	r5, r5, r7
 8000fb0:	445d      	add	r5, fp
 8000fb2:	442b      	add	r3, r5
 8000fb4:	6123      	str	r3, [r4, #16]
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	b007      	add	sp, #28
 8000fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fbe:	f04f 0b00 	mov.w	fp, #0
 8000fc2:	e7ca      	b.n	8000f5a <_scanf_i+0x15e>
 8000fc4:	07ca      	lsls	r2, r1, #31
 8000fc6:	bf4c      	ite	mi
 8000fc8:	8018      	strhmi	r0, [r3, #0]
 8000fca:	6018      	strpl	r0, [r3, #0]
 8000fcc:	e7eb      	b.n	8000fa6 <_scanf_i+0x1aa>
 8000fce:	2001      	movs	r0, #1
 8000fd0:	e7f2      	b.n	8000fb8 <_scanf_i+0x1bc>
 8000fd2:	bf00      	nop
 8000fd4:	080013c8 	.word	0x080013c8
 8000fd8:	08001259 	.word	0x08001259
 8000fdc:	08001339 	.word	0x08001339
 8000fe0:	080013e8 	.word	0x080013e8

08000fe4 <__sccl>:
 8000fe4:	b570      	push	{r4, r5, r6, lr}
 8000fe6:	780b      	ldrb	r3, [r1, #0]
 8000fe8:	4604      	mov	r4, r0
 8000fea:	2b5e      	cmp	r3, #94	@ 0x5e
 8000fec:	bf0b      	itete	eq
 8000fee:	784b      	ldrbeq	r3, [r1, #1]
 8000ff0:	1c4a      	addne	r2, r1, #1
 8000ff2:	1c8a      	addeq	r2, r1, #2
 8000ff4:	2100      	movne	r1, #0
 8000ff6:	bf08      	it	eq
 8000ff8:	2101      	moveq	r1, #1
 8000ffa:	3801      	subs	r0, #1
 8000ffc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8001000:	f800 1f01 	strb.w	r1, [r0, #1]!
 8001004:	42a8      	cmp	r0, r5
 8001006:	d1fb      	bne.n	8001000 <__sccl+0x1c>
 8001008:	b90b      	cbnz	r3, 800100e <__sccl+0x2a>
 800100a:	1e50      	subs	r0, r2, #1
 800100c:	bd70      	pop	{r4, r5, r6, pc}
 800100e:	f081 0101 	eor.w	r1, r1, #1
 8001012:	54e1      	strb	r1, [r4, r3]
 8001014:	4610      	mov	r0, r2
 8001016:	4602      	mov	r2, r0
 8001018:	f812 5b01 	ldrb.w	r5, [r2], #1
 800101c:	2d2d      	cmp	r5, #45	@ 0x2d
 800101e:	d005      	beq.n	800102c <__sccl+0x48>
 8001020:	2d5d      	cmp	r5, #93	@ 0x5d
 8001022:	d016      	beq.n	8001052 <__sccl+0x6e>
 8001024:	2d00      	cmp	r5, #0
 8001026:	d0f1      	beq.n	800100c <__sccl+0x28>
 8001028:	462b      	mov	r3, r5
 800102a:	e7f2      	b.n	8001012 <__sccl+0x2e>
 800102c:	7846      	ldrb	r6, [r0, #1]
 800102e:	2e5d      	cmp	r6, #93	@ 0x5d
 8001030:	d0fa      	beq.n	8001028 <__sccl+0x44>
 8001032:	42b3      	cmp	r3, r6
 8001034:	dcf8      	bgt.n	8001028 <__sccl+0x44>
 8001036:	3002      	adds	r0, #2
 8001038:	461a      	mov	r2, r3
 800103a:	3201      	adds	r2, #1
 800103c:	4296      	cmp	r6, r2
 800103e:	54a1      	strb	r1, [r4, r2]
 8001040:	dcfb      	bgt.n	800103a <__sccl+0x56>
 8001042:	1af2      	subs	r2, r6, r3
 8001044:	3a01      	subs	r2, #1
 8001046:	1c5d      	adds	r5, r3, #1
 8001048:	42b3      	cmp	r3, r6
 800104a:	bfa8      	it	ge
 800104c:	2200      	movge	r2, #0
 800104e:	18ab      	adds	r3, r5, r2
 8001050:	e7e1      	b.n	8001016 <__sccl+0x32>
 8001052:	4610      	mov	r0, r2
 8001054:	e7da      	b.n	800100c <__sccl+0x28>

08001056 <__submore>:
 8001056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800105a:	460c      	mov	r4, r1
 800105c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800105e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001062:	4299      	cmp	r1, r3
 8001064:	d11d      	bne.n	80010a2 <__submore+0x4c>
 8001066:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800106a:	f7ff fc15 	bl	8000898 <_malloc_r>
 800106e:	b918      	cbnz	r0, 8001078 <__submore+0x22>
 8001070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001078:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800107c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800107e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8001082:	6360      	str	r0, [r4, #52]	@ 0x34
 8001084:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8001088:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800108c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8001090:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8001094:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8001098:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800109c:	6020      	str	r0, [r4, #0]
 800109e:	2000      	movs	r0, #0
 80010a0:	e7e8      	b.n	8001074 <__submore+0x1e>
 80010a2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80010a4:	0077      	lsls	r7, r6, #1
 80010a6:	463a      	mov	r2, r7
 80010a8:	f000 f82e 	bl	8001108 <_realloc_r>
 80010ac:	4605      	mov	r5, r0
 80010ae:	2800      	cmp	r0, #0
 80010b0:	d0de      	beq.n	8001070 <__submore+0x1a>
 80010b2:	eb00 0806 	add.w	r8, r0, r6
 80010b6:	4601      	mov	r1, r0
 80010b8:	4632      	mov	r2, r6
 80010ba:	4640      	mov	r0, r8
 80010bc:	f000 f816 	bl	80010ec <memcpy>
 80010c0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80010c4:	f8c4 8000 	str.w	r8, [r4]
 80010c8:	e7e9      	b.n	800109e <__submore+0x48>
	...

080010cc <_sbrk_r>:
 80010cc:	b538      	push	{r3, r4, r5, lr}
 80010ce:	4d06      	ldr	r5, [pc, #24]	@ (80010e8 <_sbrk_r+0x1c>)
 80010d0:	2300      	movs	r3, #0
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	602b      	str	r3, [r5, #0]
 80010d8:	f7ff f9a6 	bl	8000428 <_sbrk>
 80010dc:	1c43      	adds	r3, r0, #1
 80010de:	d102      	bne.n	80010e6 <_sbrk_r+0x1a>
 80010e0:	682b      	ldr	r3, [r5, #0]
 80010e2:	b103      	cbz	r3, 80010e6 <_sbrk_r+0x1a>
 80010e4:	6023      	str	r3, [r4, #0]
 80010e6:	bd38      	pop	{r3, r4, r5, pc}
 80010e8:	200001a8 	.word	0x200001a8

080010ec <memcpy>:
 80010ec:	440a      	add	r2, r1
 80010ee:	4291      	cmp	r1, r2
 80010f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80010f4:	d100      	bne.n	80010f8 <memcpy+0xc>
 80010f6:	4770      	bx	lr
 80010f8:	b510      	push	{r4, lr}
 80010fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80010fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001102:	4291      	cmp	r1, r2
 8001104:	d1f9      	bne.n	80010fa <memcpy+0xe>
 8001106:	bd10      	pop	{r4, pc}

08001108 <_realloc_r>:
 8001108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800110c:	4680      	mov	r8, r0
 800110e:	4615      	mov	r5, r2
 8001110:	460c      	mov	r4, r1
 8001112:	b921      	cbnz	r1, 800111e <_realloc_r+0x16>
 8001114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001118:	4611      	mov	r1, r2
 800111a:	f7ff bbbd 	b.w	8000898 <_malloc_r>
 800111e:	b92a      	cbnz	r2, 800112c <_realloc_r+0x24>
 8001120:	f7ff fb4e 	bl	80007c0 <_free_r>
 8001124:	2400      	movs	r4, #0
 8001126:	4620      	mov	r0, r4
 8001128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800112c:	f000 f906 	bl	800133c <_malloc_usable_size_r>
 8001130:	4285      	cmp	r5, r0
 8001132:	4606      	mov	r6, r0
 8001134:	d802      	bhi.n	800113c <_realloc_r+0x34>
 8001136:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800113a:	d8f4      	bhi.n	8001126 <_realloc_r+0x1e>
 800113c:	4629      	mov	r1, r5
 800113e:	4640      	mov	r0, r8
 8001140:	f7ff fbaa 	bl	8000898 <_malloc_r>
 8001144:	4607      	mov	r7, r0
 8001146:	2800      	cmp	r0, #0
 8001148:	d0ec      	beq.n	8001124 <_realloc_r+0x1c>
 800114a:	42b5      	cmp	r5, r6
 800114c:	462a      	mov	r2, r5
 800114e:	4621      	mov	r1, r4
 8001150:	bf28      	it	cs
 8001152:	4632      	movcs	r2, r6
 8001154:	f7ff ffca 	bl	80010ec <memcpy>
 8001158:	4621      	mov	r1, r4
 800115a:	4640      	mov	r0, r8
 800115c:	f7ff fb30 	bl	80007c0 <_free_r>
 8001160:	463c      	mov	r4, r7
 8001162:	e7e0      	b.n	8001126 <_realloc_r+0x1e>

08001164 <_strtol_l.constprop.0>:
 8001164:	2b24      	cmp	r3, #36	@ 0x24
 8001166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800116a:	4686      	mov	lr, r0
 800116c:	4690      	mov	r8, r2
 800116e:	d801      	bhi.n	8001174 <_strtol_l.constprop.0+0x10>
 8001170:	2b01      	cmp	r3, #1
 8001172:	d106      	bne.n	8001182 <_strtol_l.constprop.0+0x1e>
 8001174:	f7ff faf8 	bl	8000768 <__errno>
 8001178:	2316      	movs	r3, #22
 800117a:	6003      	str	r3, [r0, #0]
 800117c:	2000      	movs	r0, #0
 800117e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001182:	4834      	ldr	r0, [pc, #208]	@ (8001254 <_strtol_l.constprop.0+0xf0>)
 8001184:	460d      	mov	r5, r1
 8001186:	462a      	mov	r2, r5
 8001188:	f815 4b01 	ldrb.w	r4, [r5], #1
 800118c:	5d06      	ldrb	r6, [r0, r4]
 800118e:	f016 0608 	ands.w	r6, r6, #8
 8001192:	d1f8      	bne.n	8001186 <_strtol_l.constprop.0+0x22>
 8001194:	2c2d      	cmp	r4, #45	@ 0x2d
 8001196:	d12d      	bne.n	80011f4 <_strtol_l.constprop.0+0x90>
 8001198:	782c      	ldrb	r4, [r5, #0]
 800119a:	2601      	movs	r6, #1
 800119c:	1c95      	adds	r5, r2, #2
 800119e:	f033 0210 	bics.w	r2, r3, #16
 80011a2:	d109      	bne.n	80011b8 <_strtol_l.constprop.0+0x54>
 80011a4:	2c30      	cmp	r4, #48	@ 0x30
 80011a6:	d12a      	bne.n	80011fe <_strtol_l.constprop.0+0x9a>
 80011a8:	782a      	ldrb	r2, [r5, #0]
 80011aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80011ae:	2a58      	cmp	r2, #88	@ 0x58
 80011b0:	d125      	bne.n	80011fe <_strtol_l.constprop.0+0x9a>
 80011b2:	786c      	ldrb	r4, [r5, #1]
 80011b4:	2310      	movs	r3, #16
 80011b6:	3502      	adds	r5, #2
 80011b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80011bc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80011c0:	2200      	movs	r2, #0
 80011c2:	fbbc f9f3 	udiv	r9, ip, r3
 80011c6:	4610      	mov	r0, r2
 80011c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80011cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80011d0:	2f09      	cmp	r7, #9
 80011d2:	d81b      	bhi.n	800120c <_strtol_l.constprop.0+0xa8>
 80011d4:	463c      	mov	r4, r7
 80011d6:	42a3      	cmp	r3, r4
 80011d8:	dd27      	ble.n	800122a <_strtol_l.constprop.0+0xc6>
 80011da:	1c57      	adds	r7, r2, #1
 80011dc:	d007      	beq.n	80011ee <_strtol_l.constprop.0+0x8a>
 80011de:	4581      	cmp	r9, r0
 80011e0:	d320      	bcc.n	8001224 <_strtol_l.constprop.0+0xc0>
 80011e2:	d101      	bne.n	80011e8 <_strtol_l.constprop.0+0x84>
 80011e4:	45a2      	cmp	sl, r4
 80011e6:	db1d      	blt.n	8001224 <_strtol_l.constprop.0+0xc0>
 80011e8:	fb00 4003 	mla	r0, r0, r3, r4
 80011ec:	2201      	movs	r2, #1
 80011ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80011f2:	e7eb      	b.n	80011cc <_strtol_l.constprop.0+0x68>
 80011f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80011f6:	bf04      	itt	eq
 80011f8:	782c      	ldrbeq	r4, [r5, #0]
 80011fa:	1c95      	addeq	r5, r2, #2
 80011fc:	e7cf      	b.n	800119e <_strtol_l.constprop.0+0x3a>
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1da      	bne.n	80011b8 <_strtol_l.constprop.0+0x54>
 8001202:	2c30      	cmp	r4, #48	@ 0x30
 8001204:	bf0c      	ite	eq
 8001206:	2308      	moveq	r3, #8
 8001208:	230a      	movne	r3, #10
 800120a:	e7d5      	b.n	80011b8 <_strtol_l.constprop.0+0x54>
 800120c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8001210:	2f19      	cmp	r7, #25
 8001212:	d801      	bhi.n	8001218 <_strtol_l.constprop.0+0xb4>
 8001214:	3c37      	subs	r4, #55	@ 0x37
 8001216:	e7de      	b.n	80011d6 <_strtol_l.constprop.0+0x72>
 8001218:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800121c:	2f19      	cmp	r7, #25
 800121e:	d804      	bhi.n	800122a <_strtol_l.constprop.0+0xc6>
 8001220:	3c57      	subs	r4, #87	@ 0x57
 8001222:	e7d8      	b.n	80011d6 <_strtol_l.constprop.0+0x72>
 8001224:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001228:	e7e1      	b.n	80011ee <_strtol_l.constprop.0+0x8a>
 800122a:	1c53      	adds	r3, r2, #1
 800122c:	d108      	bne.n	8001240 <_strtol_l.constprop.0+0xdc>
 800122e:	2322      	movs	r3, #34	@ 0x22
 8001230:	f8ce 3000 	str.w	r3, [lr]
 8001234:	4660      	mov	r0, ip
 8001236:	f1b8 0f00 	cmp.w	r8, #0
 800123a:	d0a0      	beq.n	800117e <_strtol_l.constprop.0+0x1a>
 800123c:	1e69      	subs	r1, r5, #1
 800123e:	e006      	b.n	800124e <_strtol_l.constprop.0+0xea>
 8001240:	b106      	cbz	r6, 8001244 <_strtol_l.constprop.0+0xe0>
 8001242:	4240      	negs	r0, r0
 8001244:	f1b8 0f00 	cmp.w	r8, #0
 8001248:	d099      	beq.n	800117e <_strtol_l.constprop.0+0x1a>
 800124a:	2a00      	cmp	r2, #0
 800124c:	d1f6      	bne.n	800123c <_strtol_l.constprop.0+0xd8>
 800124e:	f8c8 1000 	str.w	r1, [r8]
 8001252:	e794      	b.n	800117e <_strtol_l.constprop.0+0x1a>
 8001254:	080013f4 	.word	0x080013f4

08001258 <_strtol_r>:
 8001258:	f7ff bf84 	b.w	8001164 <_strtol_l.constprop.0>

0800125c <_strtoul_l.constprop.0>:
 800125c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001260:	4e34      	ldr	r6, [pc, #208]	@ (8001334 <_strtoul_l.constprop.0+0xd8>)
 8001262:	4686      	mov	lr, r0
 8001264:	460d      	mov	r5, r1
 8001266:	4628      	mov	r0, r5
 8001268:	f815 4b01 	ldrb.w	r4, [r5], #1
 800126c:	5d37      	ldrb	r7, [r6, r4]
 800126e:	f017 0708 	ands.w	r7, r7, #8
 8001272:	d1f8      	bne.n	8001266 <_strtoul_l.constprop.0+0xa>
 8001274:	2c2d      	cmp	r4, #45	@ 0x2d
 8001276:	d12f      	bne.n	80012d8 <_strtoul_l.constprop.0+0x7c>
 8001278:	782c      	ldrb	r4, [r5, #0]
 800127a:	2701      	movs	r7, #1
 800127c:	1c85      	adds	r5, r0, #2
 800127e:	f033 0010 	bics.w	r0, r3, #16
 8001282:	d109      	bne.n	8001298 <_strtoul_l.constprop.0+0x3c>
 8001284:	2c30      	cmp	r4, #48	@ 0x30
 8001286:	d12c      	bne.n	80012e2 <_strtoul_l.constprop.0+0x86>
 8001288:	7828      	ldrb	r0, [r5, #0]
 800128a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800128e:	2858      	cmp	r0, #88	@ 0x58
 8001290:	d127      	bne.n	80012e2 <_strtoul_l.constprop.0+0x86>
 8001292:	786c      	ldrb	r4, [r5, #1]
 8001294:	2310      	movs	r3, #16
 8001296:	3502      	adds	r5, #2
 8001298:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800129c:	2600      	movs	r6, #0
 800129e:	fbb8 f8f3 	udiv	r8, r8, r3
 80012a2:	fb03 f908 	mul.w	r9, r3, r8
 80012a6:	ea6f 0909 	mvn.w	r9, r9
 80012aa:	4630      	mov	r0, r6
 80012ac:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80012b0:	f1bc 0f09 	cmp.w	ip, #9
 80012b4:	d81c      	bhi.n	80012f0 <_strtoul_l.constprop.0+0x94>
 80012b6:	4664      	mov	r4, ip
 80012b8:	42a3      	cmp	r3, r4
 80012ba:	dd2a      	ble.n	8001312 <_strtoul_l.constprop.0+0xb6>
 80012bc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80012c0:	d007      	beq.n	80012d2 <_strtoul_l.constprop.0+0x76>
 80012c2:	4580      	cmp	r8, r0
 80012c4:	d322      	bcc.n	800130c <_strtoul_l.constprop.0+0xb0>
 80012c6:	d101      	bne.n	80012cc <_strtoul_l.constprop.0+0x70>
 80012c8:	45a1      	cmp	r9, r4
 80012ca:	db1f      	blt.n	800130c <_strtoul_l.constprop.0+0xb0>
 80012cc:	fb00 4003 	mla	r0, r0, r3, r4
 80012d0:	2601      	movs	r6, #1
 80012d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80012d6:	e7e9      	b.n	80012ac <_strtoul_l.constprop.0+0x50>
 80012d8:	2c2b      	cmp	r4, #43	@ 0x2b
 80012da:	bf04      	itt	eq
 80012dc:	782c      	ldrbeq	r4, [r5, #0]
 80012de:	1c85      	addeq	r5, r0, #2
 80012e0:	e7cd      	b.n	800127e <_strtoul_l.constprop.0+0x22>
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1d8      	bne.n	8001298 <_strtoul_l.constprop.0+0x3c>
 80012e6:	2c30      	cmp	r4, #48	@ 0x30
 80012e8:	bf0c      	ite	eq
 80012ea:	2308      	moveq	r3, #8
 80012ec:	230a      	movne	r3, #10
 80012ee:	e7d3      	b.n	8001298 <_strtoul_l.constprop.0+0x3c>
 80012f0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80012f4:	f1bc 0f19 	cmp.w	ip, #25
 80012f8:	d801      	bhi.n	80012fe <_strtoul_l.constprop.0+0xa2>
 80012fa:	3c37      	subs	r4, #55	@ 0x37
 80012fc:	e7dc      	b.n	80012b8 <_strtoul_l.constprop.0+0x5c>
 80012fe:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8001302:	f1bc 0f19 	cmp.w	ip, #25
 8001306:	d804      	bhi.n	8001312 <_strtoul_l.constprop.0+0xb6>
 8001308:	3c57      	subs	r4, #87	@ 0x57
 800130a:	e7d5      	b.n	80012b8 <_strtoul_l.constprop.0+0x5c>
 800130c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8001310:	e7df      	b.n	80012d2 <_strtoul_l.constprop.0+0x76>
 8001312:	1c73      	adds	r3, r6, #1
 8001314:	d106      	bne.n	8001324 <_strtoul_l.constprop.0+0xc8>
 8001316:	2322      	movs	r3, #34	@ 0x22
 8001318:	f8ce 3000 	str.w	r3, [lr]
 800131c:	4630      	mov	r0, r6
 800131e:	b932      	cbnz	r2, 800132e <_strtoul_l.constprop.0+0xd2>
 8001320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001324:	b107      	cbz	r7, 8001328 <_strtoul_l.constprop.0+0xcc>
 8001326:	4240      	negs	r0, r0
 8001328:	2a00      	cmp	r2, #0
 800132a:	d0f9      	beq.n	8001320 <_strtoul_l.constprop.0+0xc4>
 800132c:	b106      	cbz	r6, 8001330 <_strtoul_l.constprop.0+0xd4>
 800132e:	1e69      	subs	r1, r5, #1
 8001330:	6011      	str	r1, [r2, #0]
 8001332:	e7f5      	b.n	8001320 <_strtoul_l.constprop.0+0xc4>
 8001334:	080013f4 	.word	0x080013f4

08001338 <_strtoul_r>:
 8001338:	f7ff bf90 	b.w	800125c <_strtoul_l.constprop.0>

0800133c <_malloc_usable_size_r>:
 800133c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001340:	1f18      	subs	r0, r3, #4
 8001342:	2b00      	cmp	r3, #0
 8001344:	bfbc      	itt	lt
 8001346:	580b      	ldrlt	r3, [r1, r0]
 8001348:	18c0      	addlt	r0, r0, r3
 800134a:	4770      	bx	lr

0800134c <_init>:
 800134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134e:	bf00      	nop
 8001350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001352:	bc08      	pop	{r3}
 8001354:	469e      	mov	lr, r3
 8001356:	4770      	bx	lr

08001358 <_fini>:
 8001358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800135a:	bf00      	nop
 800135c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800135e:	bc08      	pop	{r3}
 8001360:	469e      	mov	lr, r3
 8001362:	4770      	bx	lr
