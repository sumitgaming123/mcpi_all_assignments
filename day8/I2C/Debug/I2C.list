
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08001658  08001658  00002658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800181c  0800181c  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  0800181c  0800181c  0000281c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001824  08001824  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001824  08001824  00002824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001828  08001828  00002828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800182c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014f1  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000719  00000000  00000000  00004575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fb  00000000  00000000  00004e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019445  00000000  00000000  00004f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fd3  00000000  00000000  0001e348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bdfb  00000000  00000000  0002031b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ac116  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ac4  00000000  00000000  000ac15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000acc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  000acc3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001640 	.word	0x08001640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001640 	.word	0x08001640

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <EEPROM_Init>:
 *      Author: mayusical
 */

#include "eeprom.h"

void EEPROM_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	int ret;
	I2CInit();
 8000286:	f000 f96d 	bl	8000564 <I2CInit>
	// optional -- check if eeprom is present
	I2CStart();
 800028a:	f000 f8a3 	bl	80003d4 <I2CStart>
	ret = I2CIsDeviceReady(EEPROM_W);
 800028e:	20a0      	movs	r0, #160	@ 0xa0
 8000290:	f000 f94a 	bl	8000528 <I2CIsDeviceReady>
 8000294:	6078      	str	r0, [r7, #4]
	// if ret=0, eeprom not avail; otherwise, eeprom is avail.
	I2CStop();
 8000296:	f000 f8bb 	bl	8000410 <I2CStop>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <EEPROM_Write>:

void EEPROM_Write(uint16_t addr, uint8_t byte[], uint8_t n) {
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b084      	sub	sp, #16
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	4603      	mov	r3, r0
 80002aa:	6039      	str	r1, [r7, #0]
 80002ac:	80fb      	strh	r3, [r7, #6]
 80002ae:	4613      	mov	r3, r2
 80002b0:	717b      	strb	r3, [r7, #5]
	uint8_t high = addr >> 8, low = addr & 0xFF;
 80002b2:	88fb      	ldrh	r3, [r7, #6]
 80002b4:	0a1b      	lsrs	r3, r3, #8
 80002b6:	b29b      	uxth	r3, r3
 80002b8:	72fb      	strb	r3, [r7, #11]
 80002ba:	88fb      	ldrh	r3, [r7, #6]
 80002bc:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 80002be:	f000 f889 	bl	80003d4 <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 80002c2:	20a0      	movs	r0, #160	@ 0xa0
 80002c4:	f000 f8bc 	bl	8000440 <I2CSendSlaveAddress>
	I2CSendData(high);
 80002c8:	7afb      	ldrb	r3, [r7, #11]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f8d4 	bl	8000478 <I2CSendData>
	I2CSendData(low);
 80002d0:	7abb      	ldrb	r3, [r7, #10]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 f8d0 	bl	8000478 <I2CSendData>
	for(int i=0; i<n; i++)
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	e009      	b.n	80002f2 <EEPROM_Write+0x50>
		I2CSendData(byte[i]);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	683a      	ldr	r2, [r7, #0]
 80002e2:	4413      	add	r3, r2
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 f8c6 	bl	8000478 <I2CSendData>
	for(int i=0; i<n; i++)
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	3301      	adds	r3, #1
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	797b      	ldrb	r3, [r7, #5]
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	dbf1      	blt.n	80002de <EEPROM_Write+0x3c>
	I2CStop();
 80002fa:	f000 f889 	bl	8000410 <I2CStop>
}
 80002fe:	bf00      	nop
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}

08000306 <EEPROM_Read>:

void EEPROM_Read(uint16_t addr, uint8_t byte[], uint8_t n) {
 8000306:	b590      	push	{r4, r7, lr}
 8000308:	b085      	sub	sp, #20
 800030a:	af00      	add	r7, sp, #0
 800030c:	4603      	mov	r3, r0
 800030e:	6039      	str	r1, [r7, #0]
 8000310:	80fb      	strh	r3, [r7, #6]
 8000312:	4613      	mov	r3, r2
 8000314:	717b      	strb	r3, [r7, #5]
	int i;
	uint8_t high = addr >> 8, low = addr & 0xFF;
 8000316:	88fb      	ldrh	r3, [r7, #6]
 8000318:	0a1b      	lsrs	r3, r3, #8
 800031a:	b29b      	uxth	r3, r3
 800031c:	72fb      	strb	r3, [r7, #11]
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 8000322:	f000 f857 	bl	80003d4 <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 8000326:	20a0      	movs	r0, #160	@ 0xa0
 8000328:	f000 f88a 	bl	8000440 <I2CSendSlaveAddress>
	I2CSendData(high);
 800032c:	7afb      	ldrb	r3, [r7, #11]
 800032e:	4618      	mov	r0, r3
 8000330:	f000 f8a2 	bl	8000478 <I2CSendData>
	I2CSendData(low);
 8000334:	7abb      	ldrb	r3, [r7, #10]
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f89e 	bl	8000478 <I2CSendData>
	I2CRepeatStart();
 800033c:	f000 f862 	bl	8000404 <I2CRepeatStart>
	I2CSendSlaveAddress(EEPROM_R);
 8000340:	20a1      	movs	r0, #161	@ 0xa1
 8000342:	f000 f87d 	bl	8000440 <I2CSendSlaveAddress>
	for(i=0; i<n-1; i++)
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e009      	b.n	8000360 <EEPROM_Read+0x5a>
		byte[i] = I2CRecvDataAck();
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	683a      	ldr	r2, [r7, #0]
 8000350:	18d4      	adds	r4, r2, r3
 8000352:	f000 f8b1 	bl	80004b8 <I2CRecvDataAck>
 8000356:	4603      	mov	r3, r0
 8000358:	7023      	strb	r3, [r4, #0]
	for(i=0; i<n-1; i++)
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3301      	adds	r3, #1
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	797b      	ldrb	r3, [r7, #5]
 8000362:	3b01      	subs	r3, #1
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	429a      	cmp	r2, r3
 8000368:	dbf0      	blt.n	800034c <EEPROM_Read+0x46>
	byte[i] = I2CRecvDataNAck();
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	683a      	ldr	r2, [r7, #0]
 800036e:	18d4      	adds	r4, r2, r3
 8000370:	f000 f8be 	bl	80004f0 <I2CRecvDataNAck>
 8000374:	4603      	mov	r3, r0
 8000376:	7023      	strb	r3, [r4, #0]
	I2CStop();
 8000378:	f000 f84a 	bl	8000410 <I2CStop>
}
 800037c:	bf00      	nop
 800037e:	3714      	adds	r7, #20
 8000380:	46bd      	mov	sp, r7
 8000382:	bd90      	pop	{r4, r7, pc}

08000384 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 800038c:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <DelayMs+0x44>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000392:	4b0e      	ldr	r3, [pc, #56]	@ (80003cc <DelayMs+0x48>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a0e      	ldr	r2, [pc, #56]	@ (80003d0 <DelayMs+0x4c>)
 8000398:	fba2 2303 	umull	r2, r3, r2, r3
 800039c:	099b      	lsrs	r3, r3, #6
 800039e:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	fb02 f303 	mul.w	r3, r2, r3
 80003a8:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80003aa:	bf00      	nop
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <DelayMs+0x44>)
 80003ae:	685a      	ldr	r2, [r3, #4]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	1ad2      	subs	r2, r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d3f8      	bcc.n	80003ac <DelayMs+0x28>
}
 80003ba:	bf00      	nop
 80003bc:	bf00      	nop
 80003be:	3714      	adds	r7, #20
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	e0001000 	.word	0xe0001000
 80003cc:	20000000 	.word	0x20000000
 80003d0:	10624dd3 	.word	0x10624dd3

080003d4 <I2CStart>:
 *  Created on: Apr 2, 2024
 *      Author: mayusical
 */
#include "i2c.h"

void I2CStart() {
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 80003d8:	4b09      	ldr	r3, [pc, #36]	@ (8000400 <I2CStart+0x2c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a08      	ldr	r2, [pc, #32]	@ (8000400 <I2CStart+0x2c>)
 80003de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003e2:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 80003e4:	bf00      	nop
 80003e6:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <I2CStart+0x2c>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0f9      	beq.n	80003e6 <I2CStart+0x12>
}
 80003f2:	bf00      	nop
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40005400 	.word	0x40005400

08000404 <I2CRepeatStart>:

void I2CRepeatStart() {
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	I2CStart();
 8000408:	f7ff ffe4 	bl	80003d4 <I2CStart>
}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}

08000410 <I2CStop>:

void I2CStop() {
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000414:	4b09      	ldr	r3, [pc, #36]	@ (800043c <I2CStop+0x2c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a08      	ldr	r2, [pc, #32]	@ (800043c <I2CStop+0x2c>)
 800041a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800041e:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 8000420:	bf00      	nop
 8000422:	4b06      	ldr	r3, [pc, #24]	@ (800043c <I2CStop+0x2c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f003 0302 	and.w	r3, r3, #2
 800042a:	2b00      	cmp	r3, #0
 800042c:	d0f9      	beq.n	8000422 <I2CStop+0x12>
}
 800042e:	bf00      	nop
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40005400 	.word	0x40005400

08000440 <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(uint8_t slaveaddr) {
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr
    // wait until address is sent
    I2C1->DR = slaveaddr;
 800044a:	4a0a      	ldr	r2, [pc, #40]	@ (8000474 <I2CSendSlaveAddress+0x34>)
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000450:	bf00      	nop
 8000452:	4b08      	ldr	r3, [pc, #32]	@ (8000474 <I2CSendSlaveAddress+0x34>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f003 0302 	and.w	r3, r3, #2
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0f9      	beq.n	8000452 <I2CSendSlaveAddress+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 800045e:	4b05      	ldr	r3, [pc, #20]	@ (8000474 <I2CSendSlaveAddress+0x34>)
 8000460:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2; // clear addr condition
 8000462:	4b04      	ldr	r3, [pc, #16]	@ (8000474 <I2CSendSlaveAddress+0x34>)
 8000464:	699b      	ldr	r3, [r3, #24]
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40005400 	.word	0x40005400

08000478 <I2CSendData>:

void I2CSendData(uint8_t val) {
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
    // send data in write mode
    // wait until address is sent
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000482:	bf00      	nop
 8000484:	4b0b      	ldr	r3, [pc, #44]	@ (80004b4 <I2CSendData+0x3c>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800048c:	2b00      	cmp	r3, #0
 800048e:	d0f9      	beq.n	8000484 <I2CSendData+0xc>
    // write dr and clear flags
    I2C1->DR = val;
 8000490:	4a08      	ldr	r2, [pc, #32]	@ (80004b4 <I2CSendData+0x3c>)
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	6113      	str	r3, [r2, #16]
    // wait until data byte is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 8000496:	bf00      	nop
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <I2CSendData+0x3c>)
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0f9      	beq.n	8000498 <I2CSendData+0x20>
}
 80004a4:	bf00      	nop
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40005400 	.word	0x40005400

080004b8 <I2CRecvDataAck>:

uint8_t I2CRecvDataAck(void) {
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
	uint8_t val;
	I2C1->CR1 |= I2C_CR1_ACK | I2C_CR1_POS;
 80004be:	4b0b      	ldr	r3, [pc, #44]	@ (80004ec <I2CRecvDataAck+0x34>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a0a      	ldr	r2, [pc, #40]	@ (80004ec <I2CRecvDataAck+0x34>)
 80004c4:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80004c8:	6013      	str	r3, [r2, #0]
	// wait until receive buffer is not empty
	while (!(I2C1->SR1 & I2C_SR1_RXNE));
 80004ca:	bf00      	nop
 80004cc:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <I2CRecvDataAck+0x34>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d0f9      	beq.n	80004cc <I2CRecvDataAck+0x14>
	// read content and clear flags
	val = (uint8_t)I2C1->DR;
 80004d8:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <I2CRecvDataAck+0x34>)
 80004da:	691b      	ldr	r3, [r3, #16]
 80004dc:	71fb      	strb	r3, [r7, #7]
	return val;
 80004de:	79fb      	ldrb	r3, [r7, #7]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40005400 	.word	0x40005400

080004f0 <I2CRecvDataNAck>:

uint8_t I2CRecvDataNAck(void) {
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
	uint8_t val;
	I2C1->CR1 &= ~(I2C_CR1_ACK | I2C_CR1_POS);
 80004f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000524 <I2CRecvDataNAck+0x34>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000524 <I2CRecvDataNAck+0x34>)
 80004fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000500:	6013      	str	r3, [r2, #0]
	// wait until receive buffer is not empty
	while (!(I2C1->SR1 & I2C_SR1_RXNE));
 8000502:	bf00      	nop
 8000504:	4b07      	ldr	r3, [pc, #28]	@ (8000524 <I2CRecvDataNAck+0x34>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0f9      	beq.n	8000504 <I2CRecvDataNAck+0x14>
	// read content and clear flags
	val = I2C1->DR;
 8000510:	4b04      	ldr	r3, [pc, #16]	@ (8000524 <I2CRecvDataNAck+0x34>)
 8000512:	691b      	ldr	r3, [r3, #16]
 8000514:	71fb      	strb	r3, [r7, #7]
	return val;
 8000516:	79fb      	ldrb	r3, [r7, #7]
}
 8000518:	4618      	mov	r0, r3
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40005400 	.word	0x40005400

08000528 <I2CIsDeviceReady>:

int I2CIsDeviceReady(uint8_t slaveaddr) {
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr of write
	slaveaddr &= ~BV(0);
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	f023 0301 	bic.w	r3, r3, #1
 8000538:	71fb      	strb	r3, [r7, #7]
    // wait until address is sent
    I2C1->DR = slaveaddr;
 800053a:	4a09      	ldr	r2, [pc, #36]	@ (8000560 <I2CIsDeviceReady+0x38>)
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000540:	bf00      	nop
 8000542:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <I2CIsDeviceReady+0x38>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	2b00      	cmp	r3, #0
 800054c:	d0f9      	beq.n	8000542 <I2CIsDeviceReady+0x1a>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 800054e:	4b04      	ldr	r3, [pc, #16]	@ (8000560 <I2CIsDeviceReady+0x38>)
 8000550:	699b      	ldr	r3, [r3, #24]
	return 1;
 8000552:	2301      	movs	r3, #1
}
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40005400 	.word	0x40005400

08000564 <I2CInit>:

void I2CInit() {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    // enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000568:	4b43      	ldr	r3, [pc, #268]	@ (8000678 <I2CInit+0x114>)
 800056a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056c:	4a42      	ldr	r2, [pc, #264]	@ (8000678 <I2CInit+0x114>)
 800056e:	f043 0302 	orr.w	r3, r3, #2
 8000572:	6313      	str	r3, [r2, #48]	@ 0x30
	DelayMs(50);
 8000574:	2032      	movs	r0, #50	@ 0x32
 8000576:	f7ff ff05 	bl	8000384 <DelayMs>

    // setup I2C pins
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800057a:	4b3f      	ldr	r3, [pc, #252]	@ (8000678 <I2CInit+0x114>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a3e      	ldr	r2, [pc, #248]	@ (8000678 <I2CInit+0x114>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(3U << I2C1_SCL*2); // PB6
 8000586:	4b3d      	ldr	r3, [pc, #244]	@ (800067c <I2CInit+0x118>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a3c      	ldr	r2, [pc, #240]	@ (800067c <I2CInit+0x118>)
 800058c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000590:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SCL*2); // AF
 8000592:	4b3a      	ldr	r3, [pc, #232]	@ (800067c <I2CInit+0x118>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a39      	ldr	r2, [pc, #228]	@ (800067c <I2CInit+0x118>)
 8000598:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800059c:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SCL);   // open-drain
 800059e:	4b37      	ldr	r3, [pc, #220]	@ (800067c <I2CInit+0x118>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	4a36      	ldr	r2, [pc, #216]	@ (800067c <I2CInit+0x118>)
 80005a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005a8:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SCL*2); // no pull-up/down
 80005aa:	4b34      	ldr	r3, [pc, #208]	@ (800067c <I2CInit+0x118>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	4a33      	ldr	r2, [pc, #204]	@ (800067c <I2CInit+0x118>)
 80005b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80005b4:	60d3      	str	r3, [r2, #12]
    GPIOB->MODER &= ~(3U << I2C1_SDA*2); // PB7
 80005b6:	4b31      	ldr	r3, [pc, #196]	@ (800067c <I2CInit+0x118>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a30      	ldr	r2, [pc, #192]	@ (800067c <I2CInit+0x118>)
 80005bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005c0:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SDA*2); // AF
 80005c2:	4b2e      	ldr	r3, [pc, #184]	@ (800067c <I2CInit+0x118>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a2d      	ldr	r2, [pc, #180]	@ (800067c <I2CInit+0x118>)
 80005c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005cc:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SDA);   // open-drain
 80005ce:	4b2b      	ldr	r3, [pc, #172]	@ (800067c <I2CInit+0x118>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	4a2a      	ldr	r2, [pc, #168]	@ (800067c <I2CInit+0x118>)
 80005d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d8:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SDA*2); // no pull-up/down
 80005da:	4b28      	ldr	r3, [pc, #160]	@ (800067c <I2CInit+0x118>)
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	4a27      	ldr	r2, [pc, #156]	@ (800067c <I2CInit+0x118>)
 80005e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005e4:	60d3      	str	r3, [r2, #12]

    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos); // for pin 6
 80005e6:	4b25      	ldr	r3, [pc, #148]	@ (800067c <I2CInit+0x118>)
 80005e8:	6a1b      	ldr	r3, [r3, #32]
 80005ea:	4a24      	ldr	r2, [pc, #144]	@ (800067c <I2CInit+0x118>)
 80005ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005f0:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL7_Pos); // for pin 7
 80005f2:	4b22      	ldr	r3, [pc, #136]	@ (800067c <I2CInit+0x118>)
 80005f4:	6a1b      	ldr	r3, [r3, #32]
 80005f6:	4a21      	ldr	r2, [pc, #132]	@ (800067c <I2CInit+0x118>)
 80005f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80005fc:	6213      	str	r3, [r2, #32]

    // enable I2C clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <I2CInit+0x114>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000602:	4a1d      	ldr	r2, [pc, #116]	@ (8000678 <I2CInit+0x114>)
 8000604:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000608:	6413      	str	r3, [r2, #64]	@ 0x40
	DelayMs(50);
 800060a:	2032      	movs	r0, #50	@ 0x32
 800060c:	f7ff feba 	bl	8000384 <DelayMs>
    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 8000610:	4b1b      	ldr	r3, [pc, #108]	@ (8000680 <I2CInit+0x11c>)
 8000612:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000616:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 8000618:	4b19      	ldr	r3, [pc, #100]	@ (8000680 <I2CInit+0x11c>)
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]

    I2C1->CR2 &= ~(I2C_CR2_ITERREN); // disable error interrupt
 800061e:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <I2CInit+0x11c>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <I2CInit+0x11c>)
 8000624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000628:	6053      	str	r3, [r2, #4]
    I2C1->CCR &= ~(1 << I2C_CCR_FS_Pos); // standard mode (100 khz)
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <I2CInit+0x11c>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a14      	ldr	r2, [pc, #80]	@ (8000680 <I2CInit+0x11c>)
 8000630:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000634:	61d3      	str	r3, [r2, #28]
    // Enable Ack
    I2C1->CR1 |= (1<<I2C_CR1_ACK_Pos);
 8000636:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <I2CInit+0x11c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a11      	ldr	r2, [pc, #68]	@ (8000680 <I2CInit+0x11c>)
 800063c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000640:	6013      	str	r3, [r2, #0]
    // Thigh and Tlow needs to be 5us each

    // Let's pick fPCLK1 = 16Mhz, TPCLK1 = 1/16Mhz = 62.5ns
    // Thigh = CCR * TPCLK1 => 5us = CCR * 62.5ns
    // CCR = 80
    I2C1->CR2 |= (16 << I2C_CR2_FREQ_Pos); // 16Mhz PCLK
 8000642:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <I2CInit+0x11c>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	4a0e      	ldr	r2, [pc, #56]	@ (8000680 <I2CInit+0x11c>)
 8000648:	f043 0310 	orr.w	r3, r3, #16
 800064c:	6053      	str	r3, [r2, #4]
    I2C1->CCR |= (80 << I2C_CCR_CCR_Pos);
 800064e:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <I2CInit+0x11c>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a0b      	ldr	r2, [pc, #44]	@ (8000680 <I2CInit+0x11c>)
 8000654:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000658:	61d3      	str	r3, [r2, #28]
    // Maximum rise time.
    // Calculation is (maximum_rise_time / Tpclk) + 1
    // In SM mode maximum allowed SCL rise time is 1000ns
    // For TPCLK1 = 62.5ns => (1000ns / 62.5ns) + 1 = 16 + 1 = 17
    I2C1->TRISE |= (17 << I2C_TRISE_TRISE_Pos); // program Trise to 17 for 100khz
 800065a:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <I2CInit+0x11c>)
 800065c:	6a1b      	ldr	r3, [r3, #32]
 800065e:	4a08      	ldr	r2, [pc, #32]	@ (8000680 <I2CInit+0x11c>)
 8000660:	f043 0311 	orr.w	r3, r3, #17
 8000664:	6213      	str	r3, [r2, #32]
    // Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 8000666:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <I2CInit+0x11c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a05      	ldr	r2, [pc, #20]	@ (8000680 <I2CInit+0x11c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6013      	str	r3, [r2, #0]
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40020400 	.word	0x40020400
 8000680:	40005400 	.word	0x40005400

08000684 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	@ 0x28
 8000688:	af00      	add	r7, sp, #0
	char str[32] = "";
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
 800069e:	615a      	str	r2, [r3, #20]
 80006a0:	619a      	str	r2, [r3, #24]
	SystemInit();
 80006a2:	f000 f871 	bl	8000788 <SystemInit>
	EEPROM_Init();
 80006a6:	f7ff fdeb 	bl	8000280 <EEPROM_Init>
	UartInit(9600);
 80006aa:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80006ae:	f000 f8a1 	bl	80007f4 <UartInit>
	//EEPROM_Write(0x0000, (uint8_t*)"GOD BLESS YOU!\r\n", 16);
	//EEPROM_Read(0x0000, (uint8_t*)str, 16);

	int choice;
		UartPuts("Enter your choice\r\n0. Exit\r\n1. to write a string into EEPROM at address 0x0000. On\r\n2. to Read 32 bytes from address 0x0000.\r\n");
 80006b2:	4817      	ldr	r0, [pc, #92]	@ (8000710 <main+0x8c>)
 80006b4:	f000 f93a 	bl	800092c <UartPuts>
		//UartGets(str);
		//sscanf(str, "%d", &choice);


	while(1){
			UartGets(str);
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f951 	bl	8000964 <UartGets>
			sscanf(str, "%d", &choice);
 80006c2:	1d3a      	adds	r2, r7, #4
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	4912      	ldr	r1, [pc, #72]	@ (8000714 <main+0x90>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f99a 	bl	8000a04 <siscanf>

			switch(choice){
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d003      	beq.n	80006de <main+0x5a>
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d007      	beq.n	80006ea <main+0x66>
			      default :
			    	   return 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	e013      	b.n	8000706 <main+0x82>
		         case 1:
		        	 EEPROM_Write(0x0000, (uint8_t*)"GOD bless you!\r\n", 32);
 80006de:	2220      	movs	r2, #32
 80006e0:	490d      	ldr	r1, [pc, #52]	@ (8000718 <main+0x94>)
 80006e2:	2000      	movs	r0, #0
 80006e4:	f7ff fddd 	bl	80002a2 <EEPROM_Write>
		    	   break;
 80006e8:	e00c      	b.n	8000704 <main+0x80>

		         case 2:
		        	 EEPROM_Read(0x0000, (uint8_t*)str, 32);
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	2220      	movs	r2, #32
 80006f0:	4619      	mov	r1, r3
 80006f2:	2000      	movs	r0, #0
 80006f4:	f7ff fe07 	bl	8000306 <EEPROM_Read>
                     UartPuts(str);
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 f915 	bl	800092c <UartPuts>
                     break;
 8000702:	bf00      	nop
			UartGets(str);
 8000704:	e7d8      	b.n	80006b8 <main+0x34>

		       }
        	}
	return 0;
}
 8000706:	4618      	mov	r0, r3
 8000708:	3728      	adds	r7, #40	@ 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	08001658 	.word	0x08001658
 8000714:	080016d8 	.word	0x080016d8
 8000718:	080016dc 	.word	0x080016dc

0800071c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000724:	4a14      	ldr	r2, [pc, #80]	@ (8000778 <_sbrk+0x5c>)
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <_sbrk+0x60>)
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000730:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <_sbrk+0x64>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d102      	bne.n	800073e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000738:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <_sbrk+0x64>)
 800073a:	4a12      	ldr	r2, [pc, #72]	@ (8000784 <_sbrk+0x68>)
 800073c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800073e:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <_sbrk+0x64>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	429a      	cmp	r2, r3
 800074a:	d207      	bcs.n	800075c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800074c:	f000 f986 	bl	8000a5c <__errno>
 8000750:	4603      	mov	r3, r0
 8000752:	220c      	movs	r2, #12
 8000754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000756:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800075a:	e009      	b.n	8000770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800075c:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <_sbrk+0x64>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000762:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <_sbrk+0x64>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	4a05      	ldr	r2, [pc, #20]	@ (8000780 <_sbrk+0x64>)
 800076c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800076e:	68fb      	ldr	r3, [r7, #12]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3718      	adds	r7, #24
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20020000 	.word	0x20020000
 800077c:	00000400 	.word	0x00000400
 8000780:	20000070 	.word	0x20000070
 8000784:	200001c0 	.word	0x200001c0

08000788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  DWT_Init();
 800078c:	f000 f802 	bl	8000794 <DWT_Init>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}

08000794 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <DWT_Init+0x58>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	4a13      	ldr	r2, [pc, #76]	@ (80007ec <DWT_Init+0x58>)
 800079e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80007a2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80007a4:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <DWT_Init+0x58>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	4a10      	ldr	r2, [pc, #64]	@ (80007ec <DWT_Init+0x58>)
 80007aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007ae:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <DWT_Init+0x5c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0e      	ldr	r2, [pc, #56]	@ (80007f0 <DWT_Init+0x5c>)
 80007b6:	f023 0301 	bic.w	r3, r3, #1
 80007ba:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <DWT_Init+0x5c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0b      	ldr	r2, [pc, #44]	@ (80007f0 <DWT_Init+0x5c>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <DWT_Init+0x5c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80007ce:	bf00      	nop
    __ASM volatile ("NOP");
 80007d0:	bf00      	nop
    __ASM volatile ("NOP");
 80007d2:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <DWT_Init+0x5c>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf0c      	ite	eq
 80007dc:	2301      	moveq	r3, #1
 80007de:	2300      	movne	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000edf0 	.word	0xe000edf0
 80007f0:	e0001000 	.word	0xe0001000

080007f4 <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 80007fc:	4b31      	ldr	r3, [pc, #196]	@ (80008c4 <UartInit+0xd0>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000800:	4a30      	ldr	r2, [pc, #192]	@ (80008c4 <UartInit+0xd0>)
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000808:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <UartInit+0xd4>)
 800080a:	6a1b      	ldr	r3, [r3, #32]
 800080c:	4a2e      	ldr	r2, [pc, #184]	@ (80008c8 <UartInit+0xd4>)
 800080e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000812:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 8000814:	4b2c      	ldr	r3, [pc, #176]	@ (80008c8 <UartInit+0xd4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a2b      	ldr	r2, [pc, #172]	@ (80008c8 <UartInit+0xd4>)
 800081a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800081e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 8000820:	4b29      	ldr	r3, [pc, #164]	@ (80008c8 <UartInit+0xd4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a28      	ldr	r2, [pc, #160]	@ (80008c8 <UartInit+0xd4>)
 8000826:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 800082a:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 800082c:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <UartInit+0xd4>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	4a25      	ldr	r2, [pc, #148]	@ (80008c8 <UartInit+0xd4>)
 8000832:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000836:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000838:	4b23      	ldr	r3, [pc, #140]	@ (80008c8 <UartInit+0xd4>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	4a22      	ldr	r2, [pc, #136]	@ (80008c8 <UartInit+0xd4>)
 800083e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000842:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 8000844:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <UartInit+0xd4>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	4a1f      	ldr	r2, [pc, #124]	@ (80008c8 <UartInit+0xd4>)
 800084a:	f023 030c 	bic.w	r3, r3, #12
 800084e:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 8000850:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <UartInit+0xd0>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000854:	4a1b      	ldr	r2, [pc, #108]	@ (80008c4 <UartInit+0xd0>)
 8000856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800085a:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 800085c:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <UartInit+0xd8>)
 800085e:	220c      	movs	r2, #12
 8000860:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 8000862:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <UartInit+0xd8>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 8000868:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <UartInit+0xd8>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000874:	d016      	beq.n	80008a4 <UartInit+0xb0>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 800087c:	d816      	bhi.n	80008ac <UartInit+0xb8>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000884:	d004      	beq.n	8000890 <UartInit+0x9c>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 800088c:	d005      	beq.n	800089a <UartInit+0xa6>
 800088e:	e00d      	b.n	80008ac <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 8000890:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <UartInit+0xd8>)
 8000892:	f240 6283 	movw	r2, #1667	@ 0x683
 8000896:	609a      	str	r2, [r3, #8]
			break;
 8000898:	e008      	b.n	80008ac <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <UartInit+0xd8>)
 800089c:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80008a0:	609a      	str	r2, [r3, #8]
			break;
 80008a2:	e003      	b.n	80008ac <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 80008a4:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <UartInit+0xd8>)
 80008a6:	228b      	movs	r2, #139	@ 0x8b
 80008a8:	609a      	str	r2, [r3, #8]
			break;
 80008aa:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <UartInit+0xd8>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	4a06      	ldr	r2, [pc, #24]	@ (80008cc <UartInit+0xd8>)
 80008b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008b6:	60d3      	str	r3, [r2, #12]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40004400 	.word	0x40004400

080008d0 <UartPutch>:

void UartPutch(uint8_t ch) {
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 80008da:	bf00      	nop
 80008dc:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <UartPutch+0x2c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d0f9      	beq.n	80008dc <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = ch;
 80008e8:	4a04      	ldr	r2, [pc, #16]	@ (80008fc <UartPutch+0x2c>)
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	6053      	str	r3, [r2, #4]
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40004400 	.word	0x40004400

08000900 <UartGetch>:

uint8_t UartGetch(void) {
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
	// wait until RDR is not empty (i.e. new byte received)
	while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 8000906:	bf00      	nop
 8000908:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <UartGetch+0x28>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f003 0320 	and.w	r3, r3, #32
 8000910:	2b00      	cmp	r3, #0
 8000912:	d0f9      	beq.n	8000908 <UartGetch+0x8>
		;
	// read received byte from RDR
	char ch = USART2->DR;
 8000914:	4b04      	ldr	r3, [pc, #16]	@ (8000928 <UartGetch+0x28>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	71fb      	strb	r3, [r7, #7]
	return ch;
 800091a:	79fb      	ldrb	r3, [r7, #7]
}
 800091c:	4618      	mov	r0, r3
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	40004400 	.word	0x40004400

0800092c <UartPuts>:

void UartPuts(char str[]) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	e009      	b.n	800094e <UartPuts+0x22>
		UartPutch(str[i]);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ffc4 	bl	80008d0 <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	3301      	adds	r3, #1
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	4413      	add	r3, r2
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1ef      	bne.n	800093a <UartPuts+0xe>
}
 800095a:	bf00      	nop
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <UartGets>:

void UartGets(char str[]) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	int i=0;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 8000970:	f7ff ffc6 	bl	8000900 <UartGetch>
 8000974:	4603      	mov	r3, r0
 8000976:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	7afa      	ldrb	r2, [r7, #11]
 8000980:	701a      	strb	r2, [r3, #0]
		i++;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3301      	adds	r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 8000988:	7afb      	ldrb	r3, [r7, #11]
 800098a:	2b0d      	cmp	r3, #13
 800098c:	d1f0      	bne.n	8000970 <UartGets+0xc>
	str[i] = '\n';
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	4413      	add	r3, r2
 8000994:	220a      	movs	r2, #10
 8000996:	701a      	strb	r2, [r3, #0]
	i++;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	3301      	adds	r3, #1
 800099c:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4413      	add	r3, r2
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b0:	480d      	ldr	r0, [pc, #52]	@ (80009e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009b4:	f7ff fee8 	bl	8000788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b8:	480c      	ldr	r0, [pc, #48]	@ (80009ec <LoopForever+0x6>)
  ldr r1, =_edata
 80009ba:	490d      	ldr	r1, [pc, #52]	@ (80009f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009bc:	4a0d      	ldr	r2, [pc, #52]	@ (80009f4 <LoopForever+0xe>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0a      	ldr	r2, [pc, #40]	@ (80009f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d0:	4c0a      	ldr	r4, [pc, #40]	@ (80009fc <LoopForever+0x16>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009de:	f000 f843 	bl	8000a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009e2:	f7ff fe4f 	bl	8000684 <main>

080009e6 <LoopForever>:

LoopForever:
  b LoopForever
 80009e6:	e7fe      	b.n	80009e6 <LoopForever>
  ldr   r0, =_estack
 80009e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80009f4:	0800182c 	.word	0x0800182c
  ldr r2, =_sbss
 80009f8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80009fc:	200001bc 	.word	0x200001bc

08000a00 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC_IRQHandler>
	...

08000a04 <siscanf>:
 8000a04:	b40e      	push	{r1, r2, r3}
 8000a06:	b530      	push	{r4, r5, lr}
 8000a08:	b09c      	sub	sp, #112	@ 0x70
 8000a0a:	ac1f      	add	r4, sp, #124	@ 0x7c
 8000a0c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8000a10:	f854 5b04 	ldr.w	r5, [r4], #4
 8000a14:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000a18:	9002      	str	r0, [sp, #8]
 8000a1a:	9006      	str	r0, [sp, #24]
 8000a1c:	f7ff fbd8 	bl	80001d0 <strlen>
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <siscanf+0x4c>)
 8000a22:	9003      	str	r0, [sp, #12]
 8000a24:	9007      	str	r0, [sp, #28]
 8000a26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000a28:	480a      	ldr	r0, [pc, #40]	@ (8000a54 <siscanf+0x50>)
 8000a2a:	9401      	str	r4, [sp, #4]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000a30:	9314      	str	r3, [sp, #80]	@ 0x50
 8000a32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a36:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000a3a:	462a      	mov	r2, r5
 8000a3c:	4623      	mov	r3, r4
 8000a3e:	a902      	add	r1, sp, #8
 8000a40:	6800      	ldr	r0, [r0, #0]
 8000a42:	f000 f987 	bl	8000d54 <__ssvfiscanf_r>
 8000a46:	b01c      	add	sp, #112	@ 0x70
 8000a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a4c:	b003      	add	sp, #12
 8000a4e:	4770      	bx	lr
 8000a50:	08000a59 	.word	0x08000a59
 8000a54:	20000004 	.word	0x20000004

08000a58 <__seofread>:
 8000a58:	2000      	movs	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__errno>:
 8000a5c:	4b01      	ldr	r3, [pc, #4]	@ (8000a64 <__errno+0x8>)
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000004 	.word	0x20000004

08000a68 <__libc_init_array>:
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	4d0d      	ldr	r5, [pc, #52]	@ (8000aa0 <__libc_init_array+0x38>)
 8000a6c:	4c0d      	ldr	r4, [pc, #52]	@ (8000aa4 <__libc_init_array+0x3c>)
 8000a6e:	1b64      	subs	r4, r4, r5
 8000a70:	10a4      	asrs	r4, r4, #2
 8000a72:	2600      	movs	r6, #0
 8000a74:	42a6      	cmp	r6, r4
 8000a76:	d109      	bne.n	8000a8c <__libc_init_array+0x24>
 8000a78:	4d0b      	ldr	r5, [pc, #44]	@ (8000aa8 <__libc_init_array+0x40>)
 8000a7a:	4c0c      	ldr	r4, [pc, #48]	@ (8000aac <__libc_init_array+0x44>)
 8000a7c:	f000 fde0 	bl	8001640 <_init>
 8000a80:	1b64      	subs	r4, r4, r5
 8000a82:	10a4      	asrs	r4, r4, #2
 8000a84:	2600      	movs	r6, #0
 8000a86:	42a6      	cmp	r6, r4
 8000a88:	d105      	bne.n	8000a96 <__libc_init_array+0x2e>
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}
 8000a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a90:	4798      	blx	r3
 8000a92:	3601      	adds	r6, #1
 8000a94:	e7ee      	b.n	8000a74 <__libc_init_array+0xc>
 8000a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a9a:	4798      	blx	r3
 8000a9c:	3601      	adds	r6, #1
 8000a9e:	e7f2      	b.n	8000a86 <__libc_init_array+0x1e>
 8000aa0:	08001824 	.word	0x08001824
 8000aa4:	08001824 	.word	0x08001824
 8000aa8:	08001824 	.word	0x08001824
 8000aac:	08001828 	.word	0x08001828

08000ab0 <__retarget_lock_acquire_recursive>:
 8000ab0:	4770      	bx	lr

08000ab2 <__retarget_lock_release_recursive>:
 8000ab2:	4770      	bx	lr

08000ab4 <_free_r>:
 8000ab4:	b538      	push	{r3, r4, r5, lr}
 8000ab6:	4605      	mov	r5, r0
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	d041      	beq.n	8000b40 <_free_r+0x8c>
 8000abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ac0:	1f0c      	subs	r4, r1, #4
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	bfb8      	it	lt
 8000ac6:	18e4      	addlt	r4, r4, r3
 8000ac8:	f000 f8e0 	bl	8000c8c <__malloc_lock>
 8000acc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b44 <_free_r+0x90>)
 8000ace:	6813      	ldr	r3, [r2, #0]
 8000ad0:	b933      	cbnz	r3, 8000ae0 <_free_r+0x2c>
 8000ad2:	6063      	str	r3, [r4, #4]
 8000ad4:	6014      	str	r4, [r2, #0]
 8000ad6:	4628      	mov	r0, r5
 8000ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000adc:	f000 b8dc 	b.w	8000c98 <__malloc_unlock>
 8000ae0:	42a3      	cmp	r3, r4
 8000ae2:	d908      	bls.n	8000af6 <_free_r+0x42>
 8000ae4:	6820      	ldr	r0, [r4, #0]
 8000ae6:	1821      	adds	r1, r4, r0
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	bf01      	itttt	eq
 8000aec:	6819      	ldreq	r1, [r3, #0]
 8000aee:	685b      	ldreq	r3, [r3, #4]
 8000af0:	1809      	addeq	r1, r1, r0
 8000af2:	6021      	streq	r1, [r4, #0]
 8000af4:	e7ed      	b.n	8000ad2 <_free_r+0x1e>
 8000af6:	461a      	mov	r2, r3
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	b10b      	cbz	r3, 8000b00 <_free_r+0x4c>
 8000afc:	42a3      	cmp	r3, r4
 8000afe:	d9fa      	bls.n	8000af6 <_free_r+0x42>
 8000b00:	6811      	ldr	r1, [r2, #0]
 8000b02:	1850      	adds	r0, r2, r1
 8000b04:	42a0      	cmp	r0, r4
 8000b06:	d10b      	bne.n	8000b20 <_free_r+0x6c>
 8000b08:	6820      	ldr	r0, [r4, #0]
 8000b0a:	4401      	add	r1, r0
 8000b0c:	1850      	adds	r0, r2, r1
 8000b0e:	4283      	cmp	r3, r0
 8000b10:	6011      	str	r1, [r2, #0]
 8000b12:	d1e0      	bne.n	8000ad6 <_free_r+0x22>
 8000b14:	6818      	ldr	r0, [r3, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	6053      	str	r3, [r2, #4]
 8000b1a:	4408      	add	r0, r1
 8000b1c:	6010      	str	r0, [r2, #0]
 8000b1e:	e7da      	b.n	8000ad6 <_free_r+0x22>
 8000b20:	d902      	bls.n	8000b28 <_free_r+0x74>
 8000b22:	230c      	movs	r3, #12
 8000b24:	602b      	str	r3, [r5, #0]
 8000b26:	e7d6      	b.n	8000ad6 <_free_r+0x22>
 8000b28:	6820      	ldr	r0, [r4, #0]
 8000b2a:	1821      	adds	r1, r4, r0
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	bf04      	itt	eq
 8000b30:	6819      	ldreq	r1, [r3, #0]
 8000b32:	685b      	ldreq	r3, [r3, #4]
 8000b34:	6063      	str	r3, [r4, #4]
 8000b36:	bf04      	itt	eq
 8000b38:	1809      	addeq	r1, r1, r0
 8000b3a:	6021      	streq	r1, [r4, #0]
 8000b3c:	6054      	str	r4, [r2, #4]
 8000b3e:	e7ca      	b.n	8000ad6 <_free_r+0x22>
 8000b40:	bd38      	pop	{r3, r4, r5, pc}
 8000b42:	bf00      	nop
 8000b44:	200001b8 	.word	0x200001b8

08000b48 <sbrk_aligned>:
 8000b48:	b570      	push	{r4, r5, r6, lr}
 8000b4a:	4e0f      	ldr	r6, [pc, #60]	@ (8000b88 <sbrk_aligned+0x40>)
 8000b4c:	460c      	mov	r4, r1
 8000b4e:	6831      	ldr	r1, [r6, #0]
 8000b50:	4605      	mov	r5, r0
 8000b52:	b911      	cbnz	r1, 8000b5a <sbrk_aligned+0x12>
 8000b54:	f000 fc34 	bl	80013c0 <_sbrk_r>
 8000b58:	6030      	str	r0, [r6, #0]
 8000b5a:	4621      	mov	r1, r4
 8000b5c:	4628      	mov	r0, r5
 8000b5e:	f000 fc2f 	bl	80013c0 <_sbrk_r>
 8000b62:	1c43      	adds	r3, r0, #1
 8000b64:	d103      	bne.n	8000b6e <sbrk_aligned+0x26>
 8000b66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	bd70      	pop	{r4, r5, r6, pc}
 8000b6e:	1cc4      	adds	r4, r0, #3
 8000b70:	f024 0403 	bic.w	r4, r4, #3
 8000b74:	42a0      	cmp	r0, r4
 8000b76:	d0f8      	beq.n	8000b6a <sbrk_aligned+0x22>
 8000b78:	1a21      	subs	r1, r4, r0
 8000b7a:	4628      	mov	r0, r5
 8000b7c:	f000 fc20 	bl	80013c0 <_sbrk_r>
 8000b80:	3001      	adds	r0, #1
 8000b82:	d1f2      	bne.n	8000b6a <sbrk_aligned+0x22>
 8000b84:	e7ef      	b.n	8000b66 <sbrk_aligned+0x1e>
 8000b86:	bf00      	nop
 8000b88:	200001b4 	.word	0x200001b4

08000b8c <_malloc_r>:
 8000b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b90:	1ccd      	adds	r5, r1, #3
 8000b92:	f025 0503 	bic.w	r5, r5, #3
 8000b96:	3508      	adds	r5, #8
 8000b98:	2d0c      	cmp	r5, #12
 8000b9a:	bf38      	it	cc
 8000b9c:	250c      	movcc	r5, #12
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	4606      	mov	r6, r0
 8000ba2:	db01      	blt.n	8000ba8 <_malloc_r+0x1c>
 8000ba4:	42a9      	cmp	r1, r5
 8000ba6:	d904      	bls.n	8000bb2 <_malloc_r+0x26>
 8000ba8:	230c      	movs	r3, #12
 8000baa:	6033      	str	r3, [r6, #0]
 8000bac:	2000      	movs	r0, #0
 8000bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c88 <_malloc_r+0xfc>
 8000bb6:	f000 f869 	bl	8000c8c <__malloc_lock>
 8000bba:	f8d8 3000 	ldr.w	r3, [r8]
 8000bbe:	461c      	mov	r4, r3
 8000bc0:	bb44      	cbnz	r4, 8000c14 <_malloc_r+0x88>
 8000bc2:	4629      	mov	r1, r5
 8000bc4:	4630      	mov	r0, r6
 8000bc6:	f7ff ffbf 	bl	8000b48 <sbrk_aligned>
 8000bca:	1c43      	adds	r3, r0, #1
 8000bcc:	4604      	mov	r4, r0
 8000bce:	d158      	bne.n	8000c82 <_malloc_r+0xf6>
 8000bd0:	f8d8 4000 	ldr.w	r4, [r8]
 8000bd4:	4627      	mov	r7, r4
 8000bd6:	2f00      	cmp	r7, #0
 8000bd8:	d143      	bne.n	8000c62 <_malloc_r+0xd6>
 8000bda:	2c00      	cmp	r4, #0
 8000bdc:	d04b      	beq.n	8000c76 <_malloc_r+0xea>
 8000bde:	6823      	ldr	r3, [r4, #0]
 8000be0:	4639      	mov	r1, r7
 8000be2:	4630      	mov	r0, r6
 8000be4:	eb04 0903 	add.w	r9, r4, r3
 8000be8:	f000 fbea 	bl	80013c0 <_sbrk_r>
 8000bec:	4581      	cmp	r9, r0
 8000bee:	d142      	bne.n	8000c76 <_malloc_r+0xea>
 8000bf0:	6821      	ldr	r1, [r4, #0]
 8000bf2:	1a6d      	subs	r5, r5, r1
 8000bf4:	4629      	mov	r1, r5
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	f7ff ffa6 	bl	8000b48 <sbrk_aligned>
 8000bfc:	3001      	adds	r0, #1
 8000bfe:	d03a      	beq.n	8000c76 <_malloc_r+0xea>
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	442b      	add	r3, r5
 8000c04:	6023      	str	r3, [r4, #0]
 8000c06:	f8d8 3000 	ldr.w	r3, [r8]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	bb62      	cbnz	r2, 8000c68 <_malloc_r+0xdc>
 8000c0e:	f8c8 7000 	str.w	r7, [r8]
 8000c12:	e00f      	b.n	8000c34 <_malloc_r+0xa8>
 8000c14:	6822      	ldr	r2, [r4, #0]
 8000c16:	1b52      	subs	r2, r2, r5
 8000c18:	d420      	bmi.n	8000c5c <_malloc_r+0xd0>
 8000c1a:	2a0b      	cmp	r2, #11
 8000c1c:	d917      	bls.n	8000c4e <_malloc_r+0xc2>
 8000c1e:	1961      	adds	r1, r4, r5
 8000c20:	42a3      	cmp	r3, r4
 8000c22:	6025      	str	r5, [r4, #0]
 8000c24:	bf18      	it	ne
 8000c26:	6059      	strne	r1, [r3, #4]
 8000c28:	6863      	ldr	r3, [r4, #4]
 8000c2a:	bf08      	it	eq
 8000c2c:	f8c8 1000 	streq.w	r1, [r8]
 8000c30:	5162      	str	r2, [r4, r5]
 8000c32:	604b      	str	r3, [r1, #4]
 8000c34:	4630      	mov	r0, r6
 8000c36:	f000 f82f 	bl	8000c98 <__malloc_unlock>
 8000c3a:	f104 000b 	add.w	r0, r4, #11
 8000c3e:	1d23      	adds	r3, r4, #4
 8000c40:	f020 0007 	bic.w	r0, r0, #7
 8000c44:	1ac2      	subs	r2, r0, r3
 8000c46:	bf1c      	itt	ne
 8000c48:	1a1b      	subne	r3, r3, r0
 8000c4a:	50a3      	strne	r3, [r4, r2]
 8000c4c:	e7af      	b.n	8000bae <_malloc_r+0x22>
 8000c4e:	6862      	ldr	r2, [r4, #4]
 8000c50:	42a3      	cmp	r3, r4
 8000c52:	bf0c      	ite	eq
 8000c54:	f8c8 2000 	streq.w	r2, [r8]
 8000c58:	605a      	strne	r2, [r3, #4]
 8000c5a:	e7eb      	b.n	8000c34 <_malloc_r+0xa8>
 8000c5c:	4623      	mov	r3, r4
 8000c5e:	6864      	ldr	r4, [r4, #4]
 8000c60:	e7ae      	b.n	8000bc0 <_malloc_r+0x34>
 8000c62:	463c      	mov	r4, r7
 8000c64:	687f      	ldr	r7, [r7, #4]
 8000c66:	e7b6      	b.n	8000bd6 <_malloc_r+0x4a>
 8000c68:	461a      	mov	r2, r3
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	42a3      	cmp	r3, r4
 8000c6e:	d1fb      	bne.n	8000c68 <_malloc_r+0xdc>
 8000c70:	2300      	movs	r3, #0
 8000c72:	6053      	str	r3, [r2, #4]
 8000c74:	e7de      	b.n	8000c34 <_malloc_r+0xa8>
 8000c76:	230c      	movs	r3, #12
 8000c78:	6033      	str	r3, [r6, #0]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	f000 f80c 	bl	8000c98 <__malloc_unlock>
 8000c80:	e794      	b.n	8000bac <_malloc_r+0x20>
 8000c82:	6005      	str	r5, [r0, #0]
 8000c84:	e7d6      	b.n	8000c34 <_malloc_r+0xa8>
 8000c86:	bf00      	nop
 8000c88:	200001b8 	.word	0x200001b8

08000c8c <__malloc_lock>:
 8000c8c:	4801      	ldr	r0, [pc, #4]	@ (8000c94 <__malloc_lock+0x8>)
 8000c8e:	f7ff bf0f 	b.w	8000ab0 <__retarget_lock_acquire_recursive>
 8000c92:	bf00      	nop
 8000c94:	200001b0 	.word	0x200001b0

08000c98 <__malloc_unlock>:
 8000c98:	4801      	ldr	r0, [pc, #4]	@ (8000ca0 <__malloc_unlock+0x8>)
 8000c9a:	f7ff bf0a 	b.w	8000ab2 <__retarget_lock_release_recursive>
 8000c9e:	bf00      	nop
 8000ca0:	200001b0 	.word	0x200001b0

08000ca4 <_sungetc_r>:
 8000ca4:	b538      	push	{r3, r4, r5, lr}
 8000ca6:	1c4b      	adds	r3, r1, #1
 8000ca8:	4614      	mov	r4, r2
 8000caa:	d103      	bne.n	8000cb4 <_sungetc_r+0x10>
 8000cac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	bd38      	pop	{r3, r4, r5, pc}
 8000cb4:	8993      	ldrh	r3, [r2, #12]
 8000cb6:	f023 0320 	bic.w	r3, r3, #32
 8000cba:	8193      	strh	r3, [r2, #12]
 8000cbc:	6853      	ldr	r3, [r2, #4]
 8000cbe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000cc0:	b2cd      	uxtb	r5, r1
 8000cc2:	b18a      	cbz	r2, 8000ce8 <_sungetc_r+0x44>
 8000cc4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	dd08      	ble.n	8000cdc <_sungetc_r+0x38>
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	1e5a      	subs	r2, r3, #1
 8000cce:	6022      	str	r2, [r4, #0]
 8000cd0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000cd4:	6863      	ldr	r3, [r4, #4]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	6063      	str	r3, [r4, #4]
 8000cda:	e7e9      	b.n	8000cb0 <_sungetc_r+0xc>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	f000 fb34 	bl	800134a <__submore>
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	d0f1      	beq.n	8000cca <_sungetc_r+0x26>
 8000ce6:	e7e1      	b.n	8000cac <_sungetc_r+0x8>
 8000ce8:	6921      	ldr	r1, [r4, #16]
 8000cea:	6822      	ldr	r2, [r4, #0]
 8000cec:	b141      	cbz	r1, 8000d00 <_sungetc_r+0x5c>
 8000cee:	4291      	cmp	r1, r2
 8000cf0:	d206      	bcs.n	8000d00 <_sungetc_r+0x5c>
 8000cf2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8000cf6:	42a9      	cmp	r1, r5
 8000cf8:	d102      	bne.n	8000d00 <_sungetc_r+0x5c>
 8000cfa:	3a01      	subs	r2, #1
 8000cfc:	6022      	str	r2, [r4, #0]
 8000cfe:	e7ea      	b.n	8000cd6 <_sungetc_r+0x32>
 8000d00:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8000d04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d08:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000d0e:	4623      	mov	r3, r4
 8000d10:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000d14:	6023      	str	r3, [r4, #0]
 8000d16:	2301      	movs	r3, #1
 8000d18:	e7de      	b.n	8000cd8 <_sungetc_r+0x34>

08000d1a <__ssrefill_r>:
 8000d1a:	b510      	push	{r4, lr}
 8000d1c:	460c      	mov	r4, r1
 8000d1e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8000d20:	b169      	cbz	r1, 8000d3e <__ssrefill_r+0x24>
 8000d22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d26:	4299      	cmp	r1, r3
 8000d28:	d001      	beq.n	8000d2e <__ssrefill_r+0x14>
 8000d2a:	f7ff fec3 	bl	8000ab4 <_free_r>
 8000d2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d30:	6063      	str	r3, [r4, #4]
 8000d32:	2000      	movs	r0, #0
 8000d34:	6360      	str	r0, [r4, #52]	@ 0x34
 8000d36:	b113      	cbz	r3, 8000d3e <__ssrefill_r+0x24>
 8000d38:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000d3a:	6023      	str	r3, [r4, #0]
 8000d3c:	bd10      	pop	{r4, pc}
 8000d3e:	6923      	ldr	r3, [r4, #16]
 8000d40:	6023      	str	r3, [r4, #0]
 8000d42:	2300      	movs	r3, #0
 8000d44:	6063      	str	r3, [r4, #4]
 8000d46:	89a3      	ldrh	r3, [r4, #12]
 8000d48:	f043 0320 	orr.w	r3, r3, #32
 8000d4c:	81a3      	strh	r3, [r4, #12]
 8000d4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d52:	e7f3      	b.n	8000d3c <__ssrefill_r+0x22>

08000d54 <__ssvfiscanf_r>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	460c      	mov	r4, r1
 8000d5a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8000d5e:	2100      	movs	r1, #0
 8000d60:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8000d64:	49a5      	ldr	r1, [pc, #660]	@ (8000ffc <__ssvfiscanf_r+0x2a8>)
 8000d66:	91a0      	str	r1, [sp, #640]	@ 0x280
 8000d68:	f10d 0804 	add.w	r8, sp, #4
 8000d6c:	49a4      	ldr	r1, [pc, #656]	@ (8001000 <__ssvfiscanf_r+0x2ac>)
 8000d6e:	4fa5      	ldr	r7, [pc, #660]	@ (8001004 <__ssvfiscanf_r+0x2b0>)
 8000d70:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8000d74:	4606      	mov	r6, r0
 8000d76:	91a1      	str	r1, [sp, #644]	@ 0x284
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	7813      	ldrb	r3, [r2, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 8158 	beq.w	8001032 <__ssvfiscanf_r+0x2de>
 8000d82:	5cf9      	ldrb	r1, [r7, r3]
 8000d84:	f011 0108 	ands.w	r1, r1, #8
 8000d88:	f102 0501 	add.w	r5, r2, #1
 8000d8c:	d019      	beq.n	8000dc2 <__ssvfiscanf_r+0x6e>
 8000d8e:	6863      	ldr	r3, [r4, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	dd0f      	ble.n	8000db4 <__ssvfiscanf_r+0x60>
 8000d94:	6823      	ldr	r3, [r4, #0]
 8000d96:	781a      	ldrb	r2, [r3, #0]
 8000d98:	5cba      	ldrb	r2, [r7, r2]
 8000d9a:	0712      	lsls	r2, r2, #28
 8000d9c:	d401      	bmi.n	8000da2 <__ssvfiscanf_r+0x4e>
 8000d9e:	462a      	mov	r2, r5
 8000da0:	e7eb      	b.n	8000d7a <__ssvfiscanf_r+0x26>
 8000da2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000da4:	3201      	adds	r2, #1
 8000da6:	9245      	str	r2, [sp, #276]	@ 0x114
 8000da8:	6862      	ldr	r2, [r4, #4]
 8000daa:	3301      	adds	r3, #1
 8000dac:	3a01      	subs	r2, #1
 8000dae:	6062      	str	r2, [r4, #4]
 8000db0:	6023      	str	r3, [r4, #0]
 8000db2:	e7ec      	b.n	8000d8e <__ssvfiscanf_r+0x3a>
 8000db4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000db6:	4621      	mov	r1, r4
 8000db8:	4630      	mov	r0, r6
 8000dba:	4798      	blx	r3
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	d0e9      	beq.n	8000d94 <__ssvfiscanf_r+0x40>
 8000dc0:	e7ed      	b.n	8000d9e <__ssvfiscanf_r+0x4a>
 8000dc2:	2b25      	cmp	r3, #37	@ 0x25
 8000dc4:	d012      	beq.n	8000dec <__ssvfiscanf_r+0x98>
 8000dc6:	4699      	mov	r9, r3
 8000dc8:	6863      	ldr	r3, [r4, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f340 8093 	ble.w	8000ef6 <__ssvfiscanf_r+0x1a2>
 8000dd0:	6822      	ldr	r2, [r4, #0]
 8000dd2:	7813      	ldrb	r3, [r2, #0]
 8000dd4:	454b      	cmp	r3, r9
 8000dd6:	f040 812c 	bne.w	8001032 <__ssvfiscanf_r+0x2de>
 8000dda:	6863      	ldr	r3, [r4, #4]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	6063      	str	r3, [r4, #4]
 8000de0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8000de2:	3201      	adds	r2, #1
 8000de4:	3301      	adds	r3, #1
 8000de6:	6022      	str	r2, [r4, #0]
 8000de8:	9345      	str	r3, [sp, #276]	@ 0x114
 8000dea:	e7d8      	b.n	8000d9e <__ssvfiscanf_r+0x4a>
 8000dec:	9141      	str	r1, [sp, #260]	@ 0x104
 8000dee:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000df0:	7853      	ldrb	r3, [r2, #1]
 8000df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8000df4:	bf02      	ittt	eq
 8000df6:	2310      	moveq	r3, #16
 8000df8:	1c95      	addeq	r5, r2, #2
 8000dfa:	9341      	streq	r3, [sp, #260]	@ 0x104
 8000dfc:	220a      	movs	r2, #10
 8000dfe:	46a9      	mov	r9, r5
 8000e00:	f819 1b01 	ldrb.w	r1, [r9], #1
 8000e04:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8000e08:	2b09      	cmp	r3, #9
 8000e0a:	d91e      	bls.n	8000e4a <__ssvfiscanf_r+0xf6>
 8000e0c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8001008 <__ssvfiscanf_r+0x2b4>
 8000e10:	2203      	movs	r2, #3
 8000e12:	4650      	mov	r0, sl
 8000e14:	f7ff f9e4 	bl	80001e0 <memchr>
 8000e18:	b138      	cbz	r0, 8000e2a <__ssvfiscanf_r+0xd6>
 8000e1a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000e1c:	eba0 000a 	sub.w	r0, r0, sl
 8000e20:	2301      	movs	r3, #1
 8000e22:	4083      	lsls	r3, r0
 8000e24:	4313      	orrs	r3, r2
 8000e26:	9341      	str	r3, [sp, #260]	@ 0x104
 8000e28:	464d      	mov	r5, r9
 8000e2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000e2e:	2b78      	cmp	r3, #120	@ 0x78
 8000e30:	d806      	bhi.n	8000e40 <__ssvfiscanf_r+0xec>
 8000e32:	2b57      	cmp	r3, #87	@ 0x57
 8000e34:	d810      	bhi.n	8000e58 <__ssvfiscanf_r+0x104>
 8000e36:	2b25      	cmp	r3, #37	@ 0x25
 8000e38:	d0c5      	beq.n	8000dc6 <__ssvfiscanf_r+0x72>
 8000e3a:	d857      	bhi.n	8000eec <__ssvfiscanf_r+0x198>
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d065      	beq.n	8000f0c <__ssvfiscanf_r+0x1b8>
 8000e40:	2303      	movs	r3, #3
 8000e42:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000e44:	230a      	movs	r3, #10
 8000e46:	9342      	str	r3, [sp, #264]	@ 0x108
 8000e48:	e078      	b.n	8000f3c <__ssvfiscanf_r+0x1e8>
 8000e4a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8000e4c:	fb02 1103 	mla	r1, r2, r3, r1
 8000e50:	3930      	subs	r1, #48	@ 0x30
 8000e52:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000e54:	464d      	mov	r5, r9
 8000e56:	e7d2      	b.n	8000dfe <__ssvfiscanf_r+0xaa>
 8000e58:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8000e5c:	2a20      	cmp	r2, #32
 8000e5e:	d8ef      	bhi.n	8000e40 <__ssvfiscanf_r+0xec>
 8000e60:	a101      	add	r1, pc, #4	@ (adr r1, 8000e68 <__ssvfiscanf_r+0x114>)
 8000e62:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000e66:	bf00      	nop
 8000e68:	08000f1b 	.word	0x08000f1b
 8000e6c:	08000e41 	.word	0x08000e41
 8000e70:	08000e41 	.word	0x08000e41
 8000e74:	08000f75 	.word	0x08000f75
 8000e78:	08000e41 	.word	0x08000e41
 8000e7c:	08000e41 	.word	0x08000e41
 8000e80:	08000e41 	.word	0x08000e41
 8000e84:	08000e41 	.word	0x08000e41
 8000e88:	08000e41 	.word	0x08000e41
 8000e8c:	08000e41 	.word	0x08000e41
 8000e90:	08000e41 	.word	0x08000e41
 8000e94:	08000f8b 	.word	0x08000f8b
 8000e98:	08000f71 	.word	0x08000f71
 8000e9c:	08000ef3 	.word	0x08000ef3
 8000ea0:	08000ef3 	.word	0x08000ef3
 8000ea4:	08000ef3 	.word	0x08000ef3
 8000ea8:	08000e41 	.word	0x08000e41
 8000eac:	08000f2d 	.word	0x08000f2d
 8000eb0:	08000e41 	.word	0x08000e41
 8000eb4:	08000e41 	.word	0x08000e41
 8000eb8:	08000e41 	.word	0x08000e41
 8000ebc:	08000e41 	.word	0x08000e41
 8000ec0:	08000f9b 	.word	0x08000f9b
 8000ec4:	08000f35 	.word	0x08000f35
 8000ec8:	08000f13 	.word	0x08000f13
 8000ecc:	08000e41 	.word	0x08000e41
 8000ed0:	08000e41 	.word	0x08000e41
 8000ed4:	08000f97 	.word	0x08000f97
 8000ed8:	08000e41 	.word	0x08000e41
 8000edc:	08000f71 	.word	0x08000f71
 8000ee0:	08000e41 	.word	0x08000e41
 8000ee4:	08000e41 	.word	0x08000e41
 8000ee8:	08000f1b 	.word	0x08000f1b
 8000eec:	3b45      	subs	r3, #69	@ 0x45
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d8a6      	bhi.n	8000e40 <__ssvfiscanf_r+0xec>
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	e021      	b.n	8000f3a <__ssvfiscanf_r+0x1e6>
 8000ef6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000ef8:	4621      	mov	r1, r4
 8000efa:	4630      	mov	r0, r6
 8000efc:	4798      	blx	r3
 8000efe:	2800      	cmp	r0, #0
 8000f00:	f43f af66 	beq.w	8000dd0 <__ssvfiscanf_r+0x7c>
 8000f04:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8000f06:	2800      	cmp	r0, #0
 8000f08:	f040 808b 	bne.w	8001022 <__ssvfiscanf_r+0x2ce>
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f10:	e08b      	b.n	800102a <__ssvfiscanf_r+0x2d6>
 8000f12:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000f14:	f042 0220 	orr.w	r2, r2, #32
 8000f18:	9241      	str	r2, [sp, #260]	@ 0x104
 8000f1a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f20:	9241      	str	r2, [sp, #260]	@ 0x104
 8000f22:	2210      	movs	r2, #16
 8000f24:	2b6e      	cmp	r3, #110	@ 0x6e
 8000f26:	9242      	str	r2, [sp, #264]	@ 0x108
 8000f28:	d902      	bls.n	8000f30 <__ssvfiscanf_r+0x1dc>
 8000f2a:	e005      	b.n	8000f38 <__ssvfiscanf_r+0x1e4>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	9342      	str	r3, [sp, #264]	@ 0x108
 8000f30:	2303      	movs	r3, #3
 8000f32:	e002      	b.n	8000f3a <__ssvfiscanf_r+0x1e6>
 8000f34:	2308      	movs	r3, #8
 8000f36:	9342      	str	r3, [sp, #264]	@ 0x108
 8000f38:	2304      	movs	r3, #4
 8000f3a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000f3c:	6863      	ldr	r3, [r4, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	dd39      	ble.n	8000fb6 <__ssvfiscanf_r+0x262>
 8000f42:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000f44:	0659      	lsls	r1, r3, #25
 8000f46:	d404      	bmi.n	8000f52 <__ssvfiscanf_r+0x1fe>
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	781a      	ldrb	r2, [r3, #0]
 8000f4c:	5cba      	ldrb	r2, [r7, r2]
 8000f4e:	0712      	lsls	r2, r2, #28
 8000f50:	d438      	bmi.n	8000fc4 <__ssvfiscanf_r+0x270>
 8000f52:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	dc47      	bgt.n	8000fe8 <__ssvfiscanf_r+0x294>
 8000f58:	466b      	mov	r3, sp
 8000f5a:	4622      	mov	r2, r4
 8000f5c:	a941      	add	r1, sp, #260	@ 0x104
 8000f5e:	4630      	mov	r0, r6
 8000f60:	f000 f86c 	bl	800103c <_scanf_chars>
 8000f64:	2801      	cmp	r0, #1
 8000f66:	d064      	beq.n	8001032 <__ssvfiscanf_r+0x2de>
 8000f68:	2802      	cmp	r0, #2
 8000f6a:	f47f af18 	bne.w	8000d9e <__ssvfiscanf_r+0x4a>
 8000f6e:	e7c9      	b.n	8000f04 <__ssvfiscanf_r+0x1b0>
 8000f70:	220a      	movs	r2, #10
 8000f72:	e7d7      	b.n	8000f24 <__ssvfiscanf_r+0x1d0>
 8000f74:	4629      	mov	r1, r5
 8000f76:	4640      	mov	r0, r8
 8000f78:	f000 f9ae 	bl	80012d8 <__sccl>
 8000f7c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000f7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f82:	9341      	str	r3, [sp, #260]	@ 0x104
 8000f84:	4605      	mov	r5, r0
 8000f86:	2301      	movs	r3, #1
 8000f88:	e7d7      	b.n	8000f3a <__ssvfiscanf_r+0x1e6>
 8000f8a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f90:	9341      	str	r3, [sp, #260]	@ 0x104
 8000f92:	2300      	movs	r3, #0
 8000f94:	e7d1      	b.n	8000f3a <__ssvfiscanf_r+0x1e6>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e7cf      	b.n	8000f3a <__ssvfiscanf_r+0x1e6>
 8000f9a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8000f9c:	06c3      	lsls	r3, r0, #27
 8000f9e:	f53f aefe 	bmi.w	8000d9e <__ssvfiscanf_r+0x4a>
 8000fa2:	9b00      	ldr	r3, [sp, #0]
 8000fa4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000fa6:	1d19      	adds	r1, r3, #4
 8000fa8:	9100      	str	r1, [sp, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	07c0      	lsls	r0, r0, #31
 8000fae:	bf4c      	ite	mi
 8000fb0:	801a      	strhmi	r2, [r3, #0]
 8000fb2:	601a      	strpl	r2, [r3, #0]
 8000fb4:	e6f3      	b.n	8000d9e <__ssvfiscanf_r+0x4a>
 8000fb6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000fb8:	4621      	mov	r1, r4
 8000fba:	4630      	mov	r0, r6
 8000fbc:	4798      	blx	r3
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	d0bf      	beq.n	8000f42 <__ssvfiscanf_r+0x1ee>
 8000fc2:	e79f      	b.n	8000f04 <__ssvfiscanf_r+0x1b0>
 8000fc4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000fc6:	3201      	adds	r2, #1
 8000fc8:	9245      	str	r2, [sp, #276]	@ 0x114
 8000fca:	6862      	ldr	r2, [r4, #4]
 8000fcc:	3a01      	subs	r2, #1
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	6062      	str	r2, [r4, #4]
 8000fd2:	dd02      	ble.n	8000fda <__ssvfiscanf_r+0x286>
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	6023      	str	r3, [r4, #0]
 8000fd8:	e7b6      	b.n	8000f48 <__ssvfiscanf_r+0x1f4>
 8000fda:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000fdc:	4621      	mov	r1, r4
 8000fde:	4630      	mov	r0, r6
 8000fe0:	4798      	blx	r3
 8000fe2:	2800      	cmp	r0, #0
 8000fe4:	d0b0      	beq.n	8000f48 <__ssvfiscanf_r+0x1f4>
 8000fe6:	e78d      	b.n	8000f04 <__ssvfiscanf_r+0x1b0>
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	dc0f      	bgt.n	800100c <__ssvfiscanf_r+0x2b8>
 8000fec:	466b      	mov	r3, sp
 8000fee:	4622      	mov	r2, r4
 8000ff0:	a941      	add	r1, sp, #260	@ 0x104
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	f000 f87c 	bl	80010f0 <_scanf_i>
 8000ff8:	e7b4      	b.n	8000f64 <__ssvfiscanf_r+0x210>
 8000ffa:	bf00      	nop
 8000ffc:	08000ca5 	.word	0x08000ca5
 8001000:	08000d1b 	.word	0x08000d1b
 8001004:	0800171c 	.word	0x0800171c
 8001008:	080016fc 	.word	0x080016fc
 800100c:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <__ssvfiscanf_r+0x2e4>)
 800100e:	2b00      	cmp	r3, #0
 8001010:	f43f aec5 	beq.w	8000d9e <__ssvfiscanf_r+0x4a>
 8001014:	466b      	mov	r3, sp
 8001016:	4622      	mov	r2, r4
 8001018:	a941      	add	r1, sp, #260	@ 0x104
 800101a:	4630      	mov	r0, r6
 800101c:	f3af 8000 	nop.w
 8001020:	e7a0      	b.n	8000f64 <__ssvfiscanf_r+0x210>
 8001022:	89a3      	ldrh	r3, [r4, #12]
 8001024:	065b      	lsls	r3, r3, #25
 8001026:	f53f af71 	bmi.w	8000f0c <__ssvfiscanf_r+0x1b8>
 800102a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800102e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001032:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8001034:	e7f9      	b.n	800102a <__ssvfiscanf_r+0x2d6>
 8001036:	bf00      	nop
 8001038:	00000000 	.word	0x00000000

0800103c <_scanf_chars>:
 800103c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001040:	4615      	mov	r5, r2
 8001042:	688a      	ldr	r2, [r1, #8]
 8001044:	4680      	mov	r8, r0
 8001046:	460c      	mov	r4, r1
 8001048:	b932      	cbnz	r2, 8001058 <_scanf_chars+0x1c>
 800104a:	698a      	ldr	r2, [r1, #24]
 800104c:	2a00      	cmp	r2, #0
 800104e:	bf14      	ite	ne
 8001050:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8001054:	2201      	moveq	r2, #1
 8001056:	608a      	str	r2, [r1, #8]
 8001058:	6822      	ldr	r2, [r4, #0]
 800105a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80010ec <_scanf_chars+0xb0>
 800105e:	06d1      	lsls	r1, r2, #27
 8001060:	bf5f      	itttt	pl
 8001062:	681a      	ldrpl	r2, [r3, #0]
 8001064:	1d11      	addpl	r1, r2, #4
 8001066:	6019      	strpl	r1, [r3, #0]
 8001068:	6816      	ldrpl	r6, [r2, #0]
 800106a:	2700      	movs	r7, #0
 800106c:	69a0      	ldr	r0, [r4, #24]
 800106e:	b188      	cbz	r0, 8001094 <_scanf_chars+0x58>
 8001070:	2801      	cmp	r0, #1
 8001072:	d107      	bne.n	8001084 <_scanf_chars+0x48>
 8001074:	682b      	ldr	r3, [r5, #0]
 8001076:	781a      	ldrb	r2, [r3, #0]
 8001078:	6963      	ldr	r3, [r4, #20]
 800107a:	5c9b      	ldrb	r3, [r3, r2]
 800107c:	b953      	cbnz	r3, 8001094 <_scanf_chars+0x58>
 800107e:	2f00      	cmp	r7, #0
 8001080:	d031      	beq.n	80010e6 <_scanf_chars+0xaa>
 8001082:	e022      	b.n	80010ca <_scanf_chars+0x8e>
 8001084:	2802      	cmp	r0, #2
 8001086:	d120      	bne.n	80010ca <_scanf_chars+0x8e>
 8001088:	682b      	ldr	r3, [r5, #0]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8001090:	071b      	lsls	r3, r3, #28
 8001092:	d41a      	bmi.n	80010ca <_scanf_chars+0x8e>
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	06da      	lsls	r2, r3, #27
 8001098:	bf5e      	ittt	pl
 800109a:	682b      	ldrpl	r3, [r5, #0]
 800109c:	781b      	ldrbpl	r3, [r3, #0]
 800109e:	f806 3b01 	strbpl.w	r3, [r6], #1
 80010a2:	682a      	ldr	r2, [r5, #0]
 80010a4:	686b      	ldr	r3, [r5, #4]
 80010a6:	3201      	adds	r2, #1
 80010a8:	602a      	str	r2, [r5, #0]
 80010aa:	68a2      	ldr	r2, [r4, #8]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	3a01      	subs	r2, #1
 80010b0:	606b      	str	r3, [r5, #4]
 80010b2:	3701      	adds	r7, #1
 80010b4:	60a2      	str	r2, [r4, #8]
 80010b6:	b142      	cbz	r2, 80010ca <_scanf_chars+0x8e>
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dcd7      	bgt.n	800106c <_scanf_chars+0x30>
 80010bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80010c0:	4629      	mov	r1, r5
 80010c2:	4640      	mov	r0, r8
 80010c4:	4798      	blx	r3
 80010c6:	2800      	cmp	r0, #0
 80010c8:	d0d0      	beq.n	800106c <_scanf_chars+0x30>
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	f013 0310 	ands.w	r3, r3, #16
 80010d0:	d105      	bne.n	80010de <_scanf_chars+0xa2>
 80010d2:	68e2      	ldr	r2, [r4, #12]
 80010d4:	3201      	adds	r2, #1
 80010d6:	60e2      	str	r2, [r4, #12]
 80010d8:	69a2      	ldr	r2, [r4, #24]
 80010da:	b102      	cbz	r2, 80010de <_scanf_chars+0xa2>
 80010dc:	7033      	strb	r3, [r6, #0]
 80010de:	6923      	ldr	r3, [r4, #16]
 80010e0:	443b      	add	r3, r7
 80010e2:	6123      	str	r3, [r4, #16]
 80010e4:	2000      	movs	r0, #0
 80010e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010ea:	bf00      	nop
 80010ec:	0800171c 	.word	0x0800171c

080010f0 <_scanf_i>:
 80010f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010f4:	4698      	mov	r8, r3
 80010f6:	4b74      	ldr	r3, [pc, #464]	@ (80012c8 <_scanf_i+0x1d8>)
 80010f8:	460c      	mov	r4, r1
 80010fa:	4682      	mov	sl, r0
 80010fc:	4616      	mov	r6, r2
 80010fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001102:	b087      	sub	sp, #28
 8001104:	ab03      	add	r3, sp, #12
 8001106:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800110a:	4b70      	ldr	r3, [pc, #448]	@ (80012cc <_scanf_i+0x1dc>)
 800110c:	69a1      	ldr	r1, [r4, #24]
 800110e:	4a70      	ldr	r2, [pc, #448]	@ (80012d0 <_scanf_i+0x1e0>)
 8001110:	2903      	cmp	r1, #3
 8001112:	bf08      	it	eq
 8001114:	461a      	moveq	r2, r3
 8001116:	68a3      	ldr	r3, [r4, #8]
 8001118:	9201      	str	r2, [sp, #4]
 800111a:	1e5a      	subs	r2, r3, #1
 800111c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8001120:	bf88      	it	hi
 8001122:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8001126:	4627      	mov	r7, r4
 8001128:	bf82      	ittt	hi
 800112a:	eb03 0905 	addhi.w	r9, r3, r5
 800112e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8001132:	60a3      	strhi	r3, [r4, #8]
 8001134:	f857 3b1c 	ldr.w	r3, [r7], #28
 8001138:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800113c:	bf98      	it	ls
 800113e:	f04f 0900 	movls.w	r9, #0
 8001142:	6023      	str	r3, [r4, #0]
 8001144:	463d      	mov	r5, r7
 8001146:	f04f 0b00 	mov.w	fp, #0
 800114a:	6831      	ldr	r1, [r6, #0]
 800114c:	ab03      	add	r3, sp, #12
 800114e:	7809      	ldrb	r1, [r1, #0]
 8001150:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8001154:	2202      	movs	r2, #2
 8001156:	f7ff f843 	bl	80001e0 <memchr>
 800115a:	b328      	cbz	r0, 80011a8 <_scanf_i+0xb8>
 800115c:	f1bb 0f01 	cmp.w	fp, #1
 8001160:	d159      	bne.n	8001216 <_scanf_i+0x126>
 8001162:	6862      	ldr	r2, [r4, #4]
 8001164:	b92a      	cbnz	r2, 8001172 <_scanf_i+0x82>
 8001166:	6822      	ldr	r2, [r4, #0]
 8001168:	2108      	movs	r1, #8
 800116a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800116e:	6061      	str	r1, [r4, #4]
 8001170:	6022      	str	r2, [r4, #0]
 8001172:	6822      	ldr	r2, [r4, #0]
 8001174:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8001178:	6022      	str	r2, [r4, #0]
 800117a:	68a2      	ldr	r2, [r4, #8]
 800117c:	1e51      	subs	r1, r2, #1
 800117e:	60a1      	str	r1, [r4, #8]
 8001180:	b192      	cbz	r2, 80011a8 <_scanf_i+0xb8>
 8001182:	6832      	ldr	r2, [r6, #0]
 8001184:	1c51      	adds	r1, r2, #1
 8001186:	6031      	str	r1, [r6, #0]
 8001188:	7812      	ldrb	r2, [r2, #0]
 800118a:	f805 2b01 	strb.w	r2, [r5], #1
 800118e:	6872      	ldr	r2, [r6, #4]
 8001190:	3a01      	subs	r2, #1
 8001192:	2a00      	cmp	r2, #0
 8001194:	6072      	str	r2, [r6, #4]
 8001196:	dc07      	bgt.n	80011a8 <_scanf_i+0xb8>
 8001198:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800119c:	4631      	mov	r1, r6
 800119e:	4650      	mov	r0, sl
 80011a0:	4790      	blx	r2
 80011a2:	2800      	cmp	r0, #0
 80011a4:	f040 8085 	bne.w	80012b2 <_scanf_i+0x1c2>
 80011a8:	f10b 0b01 	add.w	fp, fp, #1
 80011ac:	f1bb 0f03 	cmp.w	fp, #3
 80011b0:	d1cb      	bne.n	800114a <_scanf_i+0x5a>
 80011b2:	6863      	ldr	r3, [r4, #4]
 80011b4:	b90b      	cbnz	r3, 80011ba <_scanf_i+0xca>
 80011b6:	230a      	movs	r3, #10
 80011b8:	6063      	str	r3, [r4, #4]
 80011ba:	6863      	ldr	r3, [r4, #4]
 80011bc:	4945      	ldr	r1, [pc, #276]	@ (80012d4 <_scanf_i+0x1e4>)
 80011be:	6960      	ldr	r0, [r4, #20]
 80011c0:	1ac9      	subs	r1, r1, r3
 80011c2:	f000 f889 	bl	80012d8 <__sccl>
 80011c6:	f04f 0b00 	mov.w	fp, #0
 80011ca:	68a3      	ldr	r3, [r4, #8]
 80011cc:	6822      	ldr	r2, [r4, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d03d      	beq.n	800124e <_scanf_i+0x15e>
 80011d2:	6831      	ldr	r1, [r6, #0]
 80011d4:	6960      	ldr	r0, [r4, #20]
 80011d6:	f891 c000 	ldrb.w	ip, [r1]
 80011da:	f810 000c 	ldrb.w	r0, [r0, ip]
 80011de:	2800      	cmp	r0, #0
 80011e0:	d035      	beq.n	800124e <_scanf_i+0x15e>
 80011e2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80011e6:	d124      	bne.n	8001232 <_scanf_i+0x142>
 80011e8:	0510      	lsls	r0, r2, #20
 80011ea:	d522      	bpl.n	8001232 <_scanf_i+0x142>
 80011ec:	f10b 0b01 	add.w	fp, fp, #1
 80011f0:	f1b9 0f00 	cmp.w	r9, #0
 80011f4:	d003      	beq.n	80011fe <_scanf_i+0x10e>
 80011f6:	3301      	adds	r3, #1
 80011f8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80011fc:	60a3      	str	r3, [r4, #8]
 80011fe:	6873      	ldr	r3, [r6, #4]
 8001200:	3b01      	subs	r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	6073      	str	r3, [r6, #4]
 8001206:	dd1b      	ble.n	8001240 <_scanf_i+0x150>
 8001208:	6833      	ldr	r3, [r6, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	6033      	str	r3, [r6, #0]
 800120e:	68a3      	ldr	r3, [r4, #8]
 8001210:	3b01      	subs	r3, #1
 8001212:	60a3      	str	r3, [r4, #8]
 8001214:	e7d9      	b.n	80011ca <_scanf_i+0xda>
 8001216:	f1bb 0f02 	cmp.w	fp, #2
 800121a:	d1ae      	bne.n	800117a <_scanf_i+0x8a>
 800121c:	6822      	ldr	r2, [r4, #0]
 800121e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8001222:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8001226:	d1bf      	bne.n	80011a8 <_scanf_i+0xb8>
 8001228:	2110      	movs	r1, #16
 800122a:	6061      	str	r1, [r4, #4]
 800122c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001230:	e7a2      	b.n	8001178 <_scanf_i+0x88>
 8001232:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8001236:	6022      	str	r2, [r4, #0]
 8001238:	780b      	ldrb	r3, [r1, #0]
 800123a:	f805 3b01 	strb.w	r3, [r5], #1
 800123e:	e7de      	b.n	80011fe <_scanf_i+0x10e>
 8001240:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8001244:	4631      	mov	r1, r6
 8001246:	4650      	mov	r0, sl
 8001248:	4798      	blx	r3
 800124a:	2800      	cmp	r0, #0
 800124c:	d0df      	beq.n	800120e <_scanf_i+0x11e>
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	05d9      	lsls	r1, r3, #23
 8001252:	d50d      	bpl.n	8001270 <_scanf_i+0x180>
 8001254:	42bd      	cmp	r5, r7
 8001256:	d909      	bls.n	800126c <_scanf_i+0x17c>
 8001258:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800125c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8001260:	4632      	mov	r2, r6
 8001262:	4650      	mov	r0, sl
 8001264:	4798      	blx	r3
 8001266:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800126a:	464d      	mov	r5, r9
 800126c:	42bd      	cmp	r5, r7
 800126e:	d028      	beq.n	80012c2 <_scanf_i+0x1d2>
 8001270:	6822      	ldr	r2, [r4, #0]
 8001272:	f012 0210 	ands.w	r2, r2, #16
 8001276:	d113      	bne.n	80012a0 <_scanf_i+0x1b0>
 8001278:	702a      	strb	r2, [r5, #0]
 800127a:	6863      	ldr	r3, [r4, #4]
 800127c:	9e01      	ldr	r6, [sp, #4]
 800127e:	4639      	mov	r1, r7
 8001280:	4650      	mov	r0, sl
 8001282:	47b0      	blx	r6
 8001284:	f8d8 3000 	ldr.w	r3, [r8]
 8001288:	6821      	ldr	r1, [r4, #0]
 800128a:	1d1a      	adds	r2, r3, #4
 800128c:	f8c8 2000 	str.w	r2, [r8]
 8001290:	f011 0f20 	tst.w	r1, #32
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	d00f      	beq.n	80012b8 <_scanf_i+0x1c8>
 8001298:	6018      	str	r0, [r3, #0]
 800129a:	68e3      	ldr	r3, [r4, #12]
 800129c:	3301      	adds	r3, #1
 800129e:	60e3      	str	r3, [r4, #12]
 80012a0:	6923      	ldr	r3, [r4, #16]
 80012a2:	1bed      	subs	r5, r5, r7
 80012a4:	445d      	add	r5, fp
 80012a6:	442b      	add	r3, r5
 80012a8:	6123      	str	r3, [r4, #16]
 80012aa:	2000      	movs	r0, #0
 80012ac:	b007      	add	sp, #28
 80012ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012b2:	f04f 0b00 	mov.w	fp, #0
 80012b6:	e7ca      	b.n	800124e <_scanf_i+0x15e>
 80012b8:	07ca      	lsls	r2, r1, #31
 80012ba:	bf4c      	ite	mi
 80012bc:	8018      	strhmi	r0, [r3, #0]
 80012be:	6018      	strpl	r0, [r3, #0]
 80012c0:	e7eb      	b.n	800129a <_scanf_i+0x1aa>
 80012c2:	2001      	movs	r0, #1
 80012c4:	e7f2      	b.n	80012ac <_scanf_i+0x1bc>
 80012c6:	bf00      	nop
 80012c8:	080016f0 	.word	0x080016f0
 80012cc:	0800154d 	.word	0x0800154d
 80012d0:	0800162d 	.word	0x0800162d
 80012d4:	08001710 	.word	0x08001710

080012d8 <__sccl>:
 80012d8:	b570      	push	{r4, r5, r6, lr}
 80012da:	780b      	ldrb	r3, [r1, #0]
 80012dc:	4604      	mov	r4, r0
 80012de:	2b5e      	cmp	r3, #94	@ 0x5e
 80012e0:	bf0b      	itete	eq
 80012e2:	784b      	ldrbeq	r3, [r1, #1]
 80012e4:	1c4a      	addne	r2, r1, #1
 80012e6:	1c8a      	addeq	r2, r1, #2
 80012e8:	2100      	movne	r1, #0
 80012ea:	bf08      	it	eq
 80012ec:	2101      	moveq	r1, #1
 80012ee:	3801      	subs	r0, #1
 80012f0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80012f4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80012f8:	42a8      	cmp	r0, r5
 80012fa:	d1fb      	bne.n	80012f4 <__sccl+0x1c>
 80012fc:	b90b      	cbnz	r3, 8001302 <__sccl+0x2a>
 80012fe:	1e50      	subs	r0, r2, #1
 8001300:	bd70      	pop	{r4, r5, r6, pc}
 8001302:	f081 0101 	eor.w	r1, r1, #1
 8001306:	54e1      	strb	r1, [r4, r3]
 8001308:	4610      	mov	r0, r2
 800130a:	4602      	mov	r2, r0
 800130c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001310:	2d2d      	cmp	r5, #45	@ 0x2d
 8001312:	d005      	beq.n	8001320 <__sccl+0x48>
 8001314:	2d5d      	cmp	r5, #93	@ 0x5d
 8001316:	d016      	beq.n	8001346 <__sccl+0x6e>
 8001318:	2d00      	cmp	r5, #0
 800131a:	d0f1      	beq.n	8001300 <__sccl+0x28>
 800131c:	462b      	mov	r3, r5
 800131e:	e7f2      	b.n	8001306 <__sccl+0x2e>
 8001320:	7846      	ldrb	r6, [r0, #1]
 8001322:	2e5d      	cmp	r6, #93	@ 0x5d
 8001324:	d0fa      	beq.n	800131c <__sccl+0x44>
 8001326:	42b3      	cmp	r3, r6
 8001328:	dcf8      	bgt.n	800131c <__sccl+0x44>
 800132a:	3002      	adds	r0, #2
 800132c:	461a      	mov	r2, r3
 800132e:	3201      	adds	r2, #1
 8001330:	4296      	cmp	r6, r2
 8001332:	54a1      	strb	r1, [r4, r2]
 8001334:	dcfb      	bgt.n	800132e <__sccl+0x56>
 8001336:	1af2      	subs	r2, r6, r3
 8001338:	3a01      	subs	r2, #1
 800133a:	1c5d      	adds	r5, r3, #1
 800133c:	42b3      	cmp	r3, r6
 800133e:	bfa8      	it	ge
 8001340:	2200      	movge	r2, #0
 8001342:	18ab      	adds	r3, r5, r2
 8001344:	e7e1      	b.n	800130a <__sccl+0x32>
 8001346:	4610      	mov	r0, r2
 8001348:	e7da      	b.n	8001300 <__sccl+0x28>

0800134a <__submore>:
 800134a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800134e:	460c      	mov	r4, r1
 8001350:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8001352:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001356:	4299      	cmp	r1, r3
 8001358:	d11d      	bne.n	8001396 <__submore+0x4c>
 800135a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800135e:	f7ff fc15 	bl	8000b8c <_malloc_r>
 8001362:	b918      	cbnz	r0, 800136c <__submore+0x22>
 8001364:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800136c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001370:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001372:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8001376:	6360      	str	r0, [r4, #52]	@ 0x34
 8001378:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800137c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8001380:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8001384:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8001388:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800138c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8001390:	6020      	str	r0, [r4, #0]
 8001392:	2000      	movs	r0, #0
 8001394:	e7e8      	b.n	8001368 <__submore+0x1e>
 8001396:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8001398:	0077      	lsls	r7, r6, #1
 800139a:	463a      	mov	r2, r7
 800139c:	f000 f82e 	bl	80013fc <_realloc_r>
 80013a0:	4605      	mov	r5, r0
 80013a2:	2800      	cmp	r0, #0
 80013a4:	d0de      	beq.n	8001364 <__submore+0x1a>
 80013a6:	eb00 0806 	add.w	r8, r0, r6
 80013aa:	4601      	mov	r1, r0
 80013ac:	4632      	mov	r2, r6
 80013ae:	4640      	mov	r0, r8
 80013b0:	f000 f816 	bl	80013e0 <memcpy>
 80013b4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80013b8:	f8c4 8000 	str.w	r8, [r4]
 80013bc:	e7e9      	b.n	8001392 <__submore+0x48>
	...

080013c0 <_sbrk_r>:
 80013c0:	b538      	push	{r3, r4, r5, lr}
 80013c2:	4d06      	ldr	r5, [pc, #24]	@ (80013dc <_sbrk_r+0x1c>)
 80013c4:	2300      	movs	r3, #0
 80013c6:	4604      	mov	r4, r0
 80013c8:	4608      	mov	r0, r1
 80013ca:	602b      	str	r3, [r5, #0]
 80013cc:	f7ff f9a6 	bl	800071c <_sbrk>
 80013d0:	1c43      	adds	r3, r0, #1
 80013d2:	d102      	bne.n	80013da <_sbrk_r+0x1a>
 80013d4:	682b      	ldr	r3, [r5, #0]
 80013d6:	b103      	cbz	r3, 80013da <_sbrk_r+0x1a>
 80013d8:	6023      	str	r3, [r4, #0]
 80013da:	bd38      	pop	{r3, r4, r5, pc}
 80013dc:	200001ac 	.word	0x200001ac

080013e0 <memcpy>:
 80013e0:	440a      	add	r2, r1
 80013e2:	4291      	cmp	r1, r2
 80013e4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80013e8:	d100      	bne.n	80013ec <memcpy+0xc>
 80013ea:	4770      	bx	lr
 80013ec:	b510      	push	{r4, lr}
 80013ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80013f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80013f6:	4291      	cmp	r1, r2
 80013f8:	d1f9      	bne.n	80013ee <memcpy+0xe>
 80013fa:	bd10      	pop	{r4, pc}

080013fc <_realloc_r>:
 80013fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001400:	4680      	mov	r8, r0
 8001402:	4615      	mov	r5, r2
 8001404:	460c      	mov	r4, r1
 8001406:	b921      	cbnz	r1, 8001412 <_realloc_r+0x16>
 8001408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800140c:	4611      	mov	r1, r2
 800140e:	f7ff bbbd 	b.w	8000b8c <_malloc_r>
 8001412:	b92a      	cbnz	r2, 8001420 <_realloc_r+0x24>
 8001414:	f7ff fb4e 	bl	8000ab4 <_free_r>
 8001418:	2400      	movs	r4, #0
 800141a:	4620      	mov	r0, r4
 800141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001420:	f000 f906 	bl	8001630 <_malloc_usable_size_r>
 8001424:	4285      	cmp	r5, r0
 8001426:	4606      	mov	r6, r0
 8001428:	d802      	bhi.n	8001430 <_realloc_r+0x34>
 800142a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800142e:	d8f4      	bhi.n	800141a <_realloc_r+0x1e>
 8001430:	4629      	mov	r1, r5
 8001432:	4640      	mov	r0, r8
 8001434:	f7ff fbaa 	bl	8000b8c <_malloc_r>
 8001438:	4607      	mov	r7, r0
 800143a:	2800      	cmp	r0, #0
 800143c:	d0ec      	beq.n	8001418 <_realloc_r+0x1c>
 800143e:	42b5      	cmp	r5, r6
 8001440:	462a      	mov	r2, r5
 8001442:	4621      	mov	r1, r4
 8001444:	bf28      	it	cs
 8001446:	4632      	movcs	r2, r6
 8001448:	f7ff ffca 	bl	80013e0 <memcpy>
 800144c:	4621      	mov	r1, r4
 800144e:	4640      	mov	r0, r8
 8001450:	f7ff fb30 	bl	8000ab4 <_free_r>
 8001454:	463c      	mov	r4, r7
 8001456:	e7e0      	b.n	800141a <_realloc_r+0x1e>

08001458 <_strtol_l.constprop.0>:
 8001458:	2b24      	cmp	r3, #36	@ 0x24
 800145a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800145e:	4686      	mov	lr, r0
 8001460:	4690      	mov	r8, r2
 8001462:	d801      	bhi.n	8001468 <_strtol_l.constprop.0+0x10>
 8001464:	2b01      	cmp	r3, #1
 8001466:	d106      	bne.n	8001476 <_strtol_l.constprop.0+0x1e>
 8001468:	f7ff faf8 	bl	8000a5c <__errno>
 800146c:	2316      	movs	r3, #22
 800146e:	6003      	str	r3, [r0, #0]
 8001470:	2000      	movs	r0, #0
 8001472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001476:	4834      	ldr	r0, [pc, #208]	@ (8001548 <_strtol_l.constprop.0+0xf0>)
 8001478:	460d      	mov	r5, r1
 800147a:	462a      	mov	r2, r5
 800147c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001480:	5d06      	ldrb	r6, [r0, r4]
 8001482:	f016 0608 	ands.w	r6, r6, #8
 8001486:	d1f8      	bne.n	800147a <_strtol_l.constprop.0+0x22>
 8001488:	2c2d      	cmp	r4, #45	@ 0x2d
 800148a:	d12d      	bne.n	80014e8 <_strtol_l.constprop.0+0x90>
 800148c:	782c      	ldrb	r4, [r5, #0]
 800148e:	2601      	movs	r6, #1
 8001490:	1c95      	adds	r5, r2, #2
 8001492:	f033 0210 	bics.w	r2, r3, #16
 8001496:	d109      	bne.n	80014ac <_strtol_l.constprop.0+0x54>
 8001498:	2c30      	cmp	r4, #48	@ 0x30
 800149a:	d12a      	bne.n	80014f2 <_strtol_l.constprop.0+0x9a>
 800149c:	782a      	ldrb	r2, [r5, #0]
 800149e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80014a2:	2a58      	cmp	r2, #88	@ 0x58
 80014a4:	d125      	bne.n	80014f2 <_strtol_l.constprop.0+0x9a>
 80014a6:	786c      	ldrb	r4, [r5, #1]
 80014a8:	2310      	movs	r3, #16
 80014aa:	3502      	adds	r5, #2
 80014ac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80014b0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80014b4:	2200      	movs	r2, #0
 80014b6:	fbbc f9f3 	udiv	r9, ip, r3
 80014ba:	4610      	mov	r0, r2
 80014bc:	fb03 ca19 	mls	sl, r3, r9, ip
 80014c0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80014c4:	2f09      	cmp	r7, #9
 80014c6:	d81b      	bhi.n	8001500 <_strtol_l.constprop.0+0xa8>
 80014c8:	463c      	mov	r4, r7
 80014ca:	42a3      	cmp	r3, r4
 80014cc:	dd27      	ble.n	800151e <_strtol_l.constprop.0+0xc6>
 80014ce:	1c57      	adds	r7, r2, #1
 80014d0:	d007      	beq.n	80014e2 <_strtol_l.constprop.0+0x8a>
 80014d2:	4581      	cmp	r9, r0
 80014d4:	d320      	bcc.n	8001518 <_strtol_l.constprop.0+0xc0>
 80014d6:	d101      	bne.n	80014dc <_strtol_l.constprop.0+0x84>
 80014d8:	45a2      	cmp	sl, r4
 80014da:	db1d      	blt.n	8001518 <_strtol_l.constprop.0+0xc0>
 80014dc:	fb00 4003 	mla	r0, r0, r3, r4
 80014e0:	2201      	movs	r2, #1
 80014e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80014e6:	e7eb      	b.n	80014c0 <_strtol_l.constprop.0+0x68>
 80014e8:	2c2b      	cmp	r4, #43	@ 0x2b
 80014ea:	bf04      	itt	eq
 80014ec:	782c      	ldrbeq	r4, [r5, #0]
 80014ee:	1c95      	addeq	r5, r2, #2
 80014f0:	e7cf      	b.n	8001492 <_strtol_l.constprop.0+0x3a>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1da      	bne.n	80014ac <_strtol_l.constprop.0+0x54>
 80014f6:	2c30      	cmp	r4, #48	@ 0x30
 80014f8:	bf0c      	ite	eq
 80014fa:	2308      	moveq	r3, #8
 80014fc:	230a      	movne	r3, #10
 80014fe:	e7d5      	b.n	80014ac <_strtol_l.constprop.0+0x54>
 8001500:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8001504:	2f19      	cmp	r7, #25
 8001506:	d801      	bhi.n	800150c <_strtol_l.constprop.0+0xb4>
 8001508:	3c37      	subs	r4, #55	@ 0x37
 800150a:	e7de      	b.n	80014ca <_strtol_l.constprop.0+0x72>
 800150c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001510:	2f19      	cmp	r7, #25
 8001512:	d804      	bhi.n	800151e <_strtol_l.constprop.0+0xc6>
 8001514:	3c57      	subs	r4, #87	@ 0x57
 8001516:	e7d8      	b.n	80014ca <_strtol_l.constprop.0+0x72>
 8001518:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800151c:	e7e1      	b.n	80014e2 <_strtol_l.constprop.0+0x8a>
 800151e:	1c53      	adds	r3, r2, #1
 8001520:	d108      	bne.n	8001534 <_strtol_l.constprop.0+0xdc>
 8001522:	2322      	movs	r3, #34	@ 0x22
 8001524:	f8ce 3000 	str.w	r3, [lr]
 8001528:	4660      	mov	r0, ip
 800152a:	f1b8 0f00 	cmp.w	r8, #0
 800152e:	d0a0      	beq.n	8001472 <_strtol_l.constprop.0+0x1a>
 8001530:	1e69      	subs	r1, r5, #1
 8001532:	e006      	b.n	8001542 <_strtol_l.constprop.0+0xea>
 8001534:	b106      	cbz	r6, 8001538 <_strtol_l.constprop.0+0xe0>
 8001536:	4240      	negs	r0, r0
 8001538:	f1b8 0f00 	cmp.w	r8, #0
 800153c:	d099      	beq.n	8001472 <_strtol_l.constprop.0+0x1a>
 800153e:	2a00      	cmp	r2, #0
 8001540:	d1f6      	bne.n	8001530 <_strtol_l.constprop.0+0xd8>
 8001542:	f8c8 1000 	str.w	r1, [r8]
 8001546:	e794      	b.n	8001472 <_strtol_l.constprop.0+0x1a>
 8001548:	0800171c 	.word	0x0800171c

0800154c <_strtol_r>:
 800154c:	f7ff bf84 	b.w	8001458 <_strtol_l.constprop.0>

08001550 <_strtoul_l.constprop.0>:
 8001550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001554:	4e34      	ldr	r6, [pc, #208]	@ (8001628 <_strtoul_l.constprop.0+0xd8>)
 8001556:	4686      	mov	lr, r0
 8001558:	460d      	mov	r5, r1
 800155a:	4628      	mov	r0, r5
 800155c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001560:	5d37      	ldrb	r7, [r6, r4]
 8001562:	f017 0708 	ands.w	r7, r7, #8
 8001566:	d1f8      	bne.n	800155a <_strtoul_l.constprop.0+0xa>
 8001568:	2c2d      	cmp	r4, #45	@ 0x2d
 800156a:	d12f      	bne.n	80015cc <_strtoul_l.constprop.0+0x7c>
 800156c:	782c      	ldrb	r4, [r5, #0]
 800156e:	2701      	movs	r7, #1
 8001570:	1c85      	adds	r5, r0, #2
 8001572:	f033 0010 	bics.w	r0, r3, #16
 8001576:	d109      	bne.n	800158c <_strtoul_l.constprop.0+0x3c>
 8001578:	2c30      	cmp	r4, #48	@ 0x30
 800157a:	d12c      	bne.n	80015d6 <_strtoul_l.constprop.0+0x86>
 800157c:	7828      	ldrb	r0, [r5, #0]
 800157e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8001582:	2858      	cmp	r0, #88	@ 0x58
 8001584:	d127      	bne.n	80015d6 <_strtoul_l.constprop.0+0x86>
 8001586:	786c      	ldrb	r4, [r5, #1]
 8001588:	2310      	movs	r3, #16
 800158a:	3502      	adds	r5, #2
 800158c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8001590:	2600      	movs	r6, #0
 8001592:	fbb8 f8f3 	udiv	r8, r8, r3
 8001596:	fb03 f908 	mul.w	r9, r3, r8
 800159a:	ea6f 0909 	mvn.w	r9, r9
 800159e:	4630      	mov	r0, r6
 80015a0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80015a4:	f1bc 0f09 	cmp.w	ip, #9
 80015a8:	d81c      	bhi.n	80015e4 <_strtoul_l.constprop.0+0x94>
 80015aa:	4664      	mov	r4, ip
 80015ac:	42a3      	cmp	r3, r4
 80015ae:	dd2a      	ble.n	8001606 <_strtoul_l.constprop.0+0xb6>
 80015b0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80015b4:	d007      	beq.n	80015c6 <_strtoul_l.constprop.0+0x76>
 80015b6:	4580      	cmp	r8, r0
 80015b8:	d322      	bcc.n	8001600 <_strtoul_l.constprop.0+0xb0>
 80015ba:	d101      	bne.n	80015c0 <_strtoul_l.constprop.0+0x70>
 80015bc:	45a1      	cmp	r9, r4
 80015be:	db1f      	blt.n	8001600 <_strtoul_l.constprop.0+0xb0>
 80015c0:	fb00 4003 	mla	r0, r0, r3, r4
 80015c4:	2601      	movs	r6, #1
 80015c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80015ca:	e7e9      	b.n	80015a0 <_strtoul_l.constprop.0+0x50>
 80015cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80015ce:	bf04      	itt	eq
 80015d0:	782c      	ldrbeq	r4, [r5, #0]
 80015d2:	1c85      	addeq	r5, r0, #2
 80015d4:	e7cd      	b.n	8001572 <_strtoul_l.constprop.0+0x22>
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1d8      	bne.n	800158c <_strtoul_l.constprop.0+0x3c>
 80015da:	2c30      	cmp	r4, #48	@ 0x30
 80015dc:	bf0c      	ite	eq
 80015de:	2308      	moveq	r3, #8
 80015e0:	230a      	movne	r3, #10
 80015e2:	e7d3      	b.n	800158c <_strtoul_l.constprop.0+0x3c>
 80015e4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80015e8:	f1bc 0f19 	cmp.w	ip, #25
 80015ec:	d801      	bhi.n	80015f2 <_strtoul_l.constprop.0+0xa2>
 80015ee:	3c37      	subs	r4, #55	@ 0x37
 80015f0:	e7dc      	b.n	80015ac <_strtoul_l.constprop.0+0x5c>
 80015f2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80015f6:	f1bc 0f19 	cmp.w	ip, #25
 80015fa:	d804      	bhi.n	8001606 <_strtoul_l.constprop.0+0xb6>
 80015fc:	3c57      	subs	r4, #87	@ 0x57
 80015fe:	e7d5      	b.n	80015ac <_strtoul_l.constprop.0+0x5c>
 8001600:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8001604:	e7df      	b.n	80015c6 <_strtoul_l.constprop.0+0x76>
 8001606:	1c73      	adds	r3, r6, #1
 8001608:	d106      	bne.n	8001618 <_strtoul_l.constprop.0+0xc8>
 800160a:	2322      	movs	r3, #34	@ 0x22
 800160c:	f8ce 3000 	str.w	r3, [lr]
 8001610:	4630      	mov	r0, r6
 8001612:	b932      	cbnz	r2, 8001622 <_strtoul_l.constprop.0+0xd2>
 8001614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001618:	b107      	cbz	r7, 800161c <_strtoul_l.constprop.0+0xcc>
 800161a:	4240      	negs	r0, r0
 800161c:	2a00      	cmp	r2, #0
 800161e:	d0f9      	beq.n	8001614 <_strtoul_l.constprop.0+0xc4>
 8001620:	b106      	cbz	r6, 8001624 <_strtoul_l.constprop.0+0xd4>
 8001622:	1e69      	subs	r1, r5, #1
 8001624:	6011      	str	r1, [r2, #0]
 8001626:	e7f5      	b.n	8001614 <_strtoul_l.constprop.0+0xc4>
 8001628:	0800171c 	.word	0x0800171c

0800162c <_strtoul_r>:
 800162c:	f7ff bf90 	b.w	8001550 <_strtoul_l.constprop.0>

08001630 <_malloc_usable_size_r>:
 8001630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001634:	1f18      	subs	r0, r3, #4
 8001636:	2b00      	cmp	r3, #0
 8001638:	bfbc      	itt	lt
 800163a:	580b      	ldrlt	r3, [r1, r0]
 800163c:	18c0      	addlt	r0, r0, r3
 800163e:	4770      	bx	lr

08001640 <_init>:
 8001640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001642:	bf00      	nop
 8001644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001646:	bc08      	pop	{r3}
 8001648:	469e      	mov	lr, r3
 800164a:	4770      	bx	lr

0800164c <_fini>:
 800164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164e:	bf00      	nop
 8001650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001652:	bc08      	pop	{r3}
 8001654:	469e      	mov	lr, r3
 8001656:	4770      	bx	lr
